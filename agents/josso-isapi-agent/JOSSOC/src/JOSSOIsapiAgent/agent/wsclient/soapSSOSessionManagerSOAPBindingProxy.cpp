/* soapSSOSessionManagerSOAPBindingProxy.cpp
   Generated by gSOAP 2.7.14 from josso-1.2.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#define _CRTDBG_MAP_ALLOC
#include <iostream>
#include <crtdbg.h>

#include "soapSSOSessionManagerSOAPBindingProxy.h"

#ifdef _DEBUG
#define DEBUG_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)
#define new DEBUG_NEW


#endif
SSOSessionManagerSOAPBindingProxy::SSOSessionManagerSOAPBindingProxy()
{	SSOSessionManagerSOAPBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SSOSessionManagerSOAPBindingProxy::SSOSessionManagerSOAPBindingProxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	SSOSessionManagerSOAPBindingProxy_init(soap.imode, soap.omode);
}

SSOSessionManagerSOAPBindingProxy::SSOSessionManagerSOAPBindingProxy(soap_mode iomode)
{	SSOSessionManagerSOAPBindingProxy_init(iomode, iomode);
}

SSOSessionManagerSOAPBindingProxy::SSOSessionManagerSOAPBindingProxy(soap_mode imode, soap_mode omode)
{	SSOSessionManagerSOAPBindingProxy_init(imode, omode);
}

void SSOSessionManagerSOAPBindingProxy::SSOSessionManagerSOAPBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns4", "urn:org:josso:gateway:ws:1.2:wsdl/SSOIdentityProviderSOAPBinding", NULL, NULL},
	{"ns5", "urn:org:josso:gateway:ws:1.2:wsdl/SSOIdentityManagerSOAPBinding", NULL, NULL},
	{"ns6", "urn:org:josso:gateway:ws:1.2:wsdl/SSOSessionManagerSOAPBinding", NULL, NULL},
	{"ns3", "urn:org:josso:gateway:ws:1.2:protocol", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

SSOSessionManagerSOAPBindingProxy::~SSOSessionManagerSOAPBindingProxy()
{ }

void SSOSessionManagerSOAPBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *SSOSessionManagerSOAPBindingProxy::soap_fault()
{	return this->fault;
}

const char *SSOSessionManagerSOAPBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *SSOSessionManagerSOAPBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int SSOSessionManagerSOAPBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void SSOSessionManagerSOAPBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void SSOSessionManagerSOAPBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *SSOSessionManagerSOAPBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int SSOSessionManagerSOAPBindingProxy::accessSession(ns3__AccessSessionRequestType *ns3__AccessSessionRequest, ns3__AccessSessionResponseType *ns3__AccessSessionResponse)
{	struct soap *soap = this;
	struct __ns6__accessSession soap_tmp___ns6__accessSession;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://replace";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__accessSession.ns3__AccessSessionRequest = ns3__AccessSessionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__accessSession(soap, &soap_tmp___ns6__accessSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__accessSession(soap, &soap_tmp___ns6__accessSession, "-ns6:accessSession", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__accessSession(soap, &soap_tmp___ns6__accessSession, "-ns6:accessSession", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AccessSessionResponse)
		return soap_closesock(soap);
	ns3__AccessSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AccessSessionResponse->soap_get(soap, "ns3:AccessSessionResponse", "ns3:AccessSessionResponseType");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SSOSessionManagerSOAPBindingProxy::getSession(ns3__SessionRequestType *ns3__SessionRequest, ns3__SessionResponseType *ns3__SessionResponse)
{	struct soap *soap = this;
	struct __ns6__getSession soap_tmp___ns6__getSession;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://replace";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__getSession.ns3__SessionRequest = ns3__SessionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__getSession(soap, &soap_tmp___ns6__getSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__getSession(soap, &soap_tmp___ns6__getSession, "-ns6:getSession", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__getSession(soap, &soap_tmp___ns6__getSession, "-ns6:getSession", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__SessionResponse)
		return soap_closesock(soap);
	ns3__SessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SessionResponse->soap_get(soap, "ns3:SessionResponse", "ns3:SessionResponseType");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
