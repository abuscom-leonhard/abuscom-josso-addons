/* soapC.cpp
   Generated by gSOAP 2.7.14 from josso-1.2.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#define _CRTDBG_MAP_ALLOC
#include <iostream>
#include <crtdbg.h>

#include "soapH.h"

#ifdef _DEBUG
#define DEBUG_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)
#define new DEBUG_NEW
#endif

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.14 2009-09-22 18:30:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns3__SSONameValuePairType:
		return soap_in_ns3__SSONameValuePairType(soap, NULL, NULL, "ns3:SSONameValuePairType");
	case SOAP_TYPE_ns3__SSORoleType:
		return soap_in_ns3__SSORoleType(soap, NULL, NULL, "ns3:SSORoleType");
	case SOAP_TYPE_ns3__SSOUserType:
		return soap_in_ns3__SSOUserType(soap, NULL, NULL, "ns3:SSOUserType");
	case SOAP_TYPE_ns3__SSOSessionType:
		return soap_in_ns3__SSOSessionType(soap, NULL, NULL, "ns3:SSOSessionType");
	case SOAP_TYPE_ns3__NoSuchSessionErrorType:
		return soap_in_ns3__NoSuchSessionErrorType(soap, NULL, NULL, "ns3:NoSuchSessionErrorType");
	case SOAP_TYPE_ns3__SSOSessionErrorType:
		return soap_in_ns3__SSOSessionErrorType(soap, NULL, NULL, "ns3:SSOSessionErrorType");
	case SOAP_TYPE_ns3__SessionResponseType:
		return soap_in_ns3__SessionResponseType(soap, NULL, NULL, "ns3:SessionResponseType");
	case SOAP_TYPE_ns3__SessionRequestType:
		return soap_in_ns3__SessionRequestType(soap, NULL, NULL, "ns3:SessionRequestType");
	case SOAP_TYPE_ns3__AccessSessionResponseType:
		return soap_in_ns3__AccessSessionResponseType(soap, NULL, NULL, "ns3:AccessSessionResponseType");
	case SOAP_TYPE_ns3__AccessSessionRequestType:
		return soap_in_ns3__AccessSessionRequestType(soap, NULL, NULL, "ns3:AccessSessionRequestType");
	case SOAP_TYPE_ns3__InvalidSessionErrorType:
		return soap_in_ns3__InvalidSessionErrorType(soap, NULL, NULL, "ns3:InvalidSessionErrorType");
	case SOAP_TYPE_ns3__NoSuchUserErrorType:
		return soap_in_ns3__NoSuchUserErrorType(soap, NULL, NULL, "ns3:NoSuchUserErrorType");
	case SOAP_TYPE_ns3__SSOIdentityManagerErrorType:
		return soap_in_ns3__SSOIdentityManagerErrorType(soap, NULL, NULL, "ns3:SSOIdentityManagerErrorType");
	case SOAP_TYPE_ns3__UserExistsResponseType:
		return soap_in_ns3__UserExistsResponseType(soap, NULL, NULL, "ns3:UserExistsResponseType");
	case SOAP_TYPE_ns3__UserExistsRequestType:
		return soap_in_ns3__UserExistsRequestType(soap, NULL, NULL, "ns3:UserExistsRequestType");
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType:
		return soap_in_ns3__FindRolesBySSOSessionIdResponseType(soap, NULL, NULL, "ns3:FindRolesBySSOSessionIdResponseType");
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType:
		return soap_in_ns3__FindRolesBySSOSessionIdRequestType(soap, NULL, NULL, "ns3:FindRolesBySSOSessionIdRequestType");
	case SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType:
		return soap_in_ns3__FindUserInSecurityDomainResponseType(soap, NULL, NULL, "ns3:FindUserInSecurityDomainResponseType");
	case SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType:
		return soap_in_ns3__FindUserInSecurityDomainRequestType(soap, NULL, NULL, "ns3:FindUserInSecurityDomainRequestType");
	case SOAP_TYPE_ns3__FindUserInSessionResponseType:
		return soap_in_ns3__FindUserInSessionResponseType(soap, NULL, NULL, "ns3:FindUserInSessionResponseType");
	case SOAP_TYPE_ns3__FindUserInSessionRequestType:
		return soap_in_ns3__FindUserInSessionRequestType(soap, NULL, NULL, "ns3:FindUserInSessionRequestType");
	case SOAP_TYPE_ns3__AssertionNotValidErrorType:
		return soap_in_ns3__AssertionNotValidErrorType(soap, NULL, NULL, "ns3:AssertionNotValidErrorType");
	case SOAP_TYPE_ns3__SSOIdentityProviderErrorType:
		return soap_in_ns3__SSOIdentityProviderErrorType(soap, NULL, NULL, "ns3:SSOIdentityProviderErrorType");
	case SOAP_TYPE_ns3__GlobalSignoffResponseType:
		return soap_in_ns3__GlobalSignoffResponseType(soap, NULL, NULL, "ns3:GlobalSignoffResponseType");
	case SOAP_TYPE_ns3__GlobalSignoffRequestType:
		return soap_in_ns3__GlobalSignoffRequestType(soap, NULL, NULL, "ns3:GlobalSignoffRequestType");
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType:
		return soap_in_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, NULL, NULL, "ns3:AssertIdentityWithSimpleAuthenticationResponseType");
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType:
		return soap_in_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, NULL, NULL, "ns3:AssertIdentityWithSimpleAuthenticationRequestType");
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType:
		return soap_in_ns3__ResolveAuthenticationAssertionResponseType(soap, NULL, NULL, "ns3:ResolveAuthenticationAssertionResponseType");
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType:
		return soap_in_ns3__ResolveAuthenticationAssertionRequestType(soap, NULL, NULL, "ns3:ResolveAuthenticationAssertionRequestType");
	case SOAP_TYPE_PointerTons3__SessionResponseType:
		return soap_in_PointerTons3__SessionResponseType(soap, NULL, NULL, "ns3:SessionResponseType");
	case SOAP_TYPE_PointerTons3__SessionRequestType:
		return soap_in_PointerTons3__SessionRequestType(soap, NULL, NULL, "ns3:SessionRequestType");
	case SOAP_TYPE_PointerTons3__AccessSessionResponseType:
		return soap_in_PointerTons3__AccessSessionResponseType(soap, NULL, NULL, "ns3:AccessSessionResponseType");
	case SOAP_TYPE_PointerTons3__AccessSessionRequestType:
		return soap_in_PointerTons3__AccessSessionRequestType(soap, NULL, NULL, "ns3:AccessSessionRequestType");
	case SOAP_TYPE_PointerTons3__UserExistsResponseType:
		return soap_in_PointerTons3__UserExistsResponseType(soap, NULL, NULL, "ns3:UserExistsResponseType");
	case SOAP_TYPE_PointerTons3__UserExistsRequestType:
		return soap_in_PointerTons3__UserExistsRequestType(soap, NULL, NULL, "ns3:UserExistsRequestType");
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdResponseType:
		return soap_in_PointerTons3__FindRolesBySSOSessionIdResponseType(soap, NULL, NULL, "ns3:FindRolesBySSOSessionIdResponseType");
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdRequestType:
		return soap_in_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, NULL, NULL, "ns3:FindRolesBySSOSessionIdRequestType");
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainResponseType:
		return soap_in_PointerTons3__FindUserInSecurityDomainResponseType(soap, NULL, NULL, "ns3:FindUserInSecurityDomainResponseType");
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainRequestType:
		return soap_in_PointerTons3__FindUserInSecurityDomainRequestType(soap, NULL, NULL, "ns3:FindUserInSecurityDomainRequestType");
	case SOAP_TYPE_PointerTons3__FindUserInSessionResponseType:
		return soap_in_PointerTons3__FindUserInSessionResponseType(soap, NULL, NULL, "ns3:FindUserInSessionResponseType");
	case SOAP_TYPE_PointerTons3__FindUserInSessionRequestType:
		return soap_in_PointerTons3__FindUserInSessionRequestType(soap, NULL, NULL, "ns3:FindUserInSessionRequestType");
	case SOAP_TYPE_PointerTons3__GlobalSignoffResponseType:
		return soap_in_PointerTons3__GlobalSignoffResponseType(soap, NULL, NULL, "ns3:GlobalSignoffResponseType");
	case SOAP_TYPE_PointerTons3__GlobalSignoffRequestType:
		return soap_in_PointerTons3__GlobalSignoffRequestType(soap, NULL, NULL, "ns3:GlobalSignoffRequestType");
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType:
		return soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(soap, NULL, NULL, "ns3:AssertIdentityWithSimpleAuthenticationResponseType");
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType:
		return soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, NULL, NULL, "ns3:AssertIdentityWithSimpleAuthenticationRequestType");
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionResponseType:
		return soap_in_PointerTons3__ResolveAuthenticationAssertionResponseType(soap, NULL, NULL, "ns3:ResolveAuthenticationAssertionResponseType");
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionRequestType:
		return soap_in_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, NULL, NULL, "ns3:ResolveAuthenticationAssertionRequestType");
	case SOAP_TYPE_PointerTons3__SSOSessionErrorType:
		return soap_in_PointerTons3__SSOSessionErrorType(soap, NULL, NULL, "ns3:SSOSessionErrorType");
	case SOAP_TYPE_PointerTons3__NoSuchSessionErrorType:
		return soap_in_PointerTons3__NoSuchSessionErrorType(soap, NULL, NULL, "ns3:NoSuchSessionErrorType");
	case SOAP_TYPE_PointerTons3__SSOIdentityManagerErrorType:
		return soap_in_PointerTons3__SSOIdentityManagerErrorType(soap, NULL, NULL, "ns3:SSOIdentityManagerErrorType");
	case SOAP_TYPE_PointerTons3__NoSuchUserErrorType:
		return soap_in_PointerTons3__NoSuchUserErrorType(soap, NULL, NULL, "ns3:NoSuchUserErrorType");
	case SOAP_TYPE_PointerTons3__InvalidSessionErrorType:
		return soap_in_PointerTons3__InvalidSessionErrorType(soap, NULL, NULL, "ns3:InvalidSessionErrorType");
	case SOAP_TYPE_PointerTons3__SSOIdentityProviderErrorType:
		return soap_in_PointerTons3__SSOIdentityProviderErrorType(soap, NULL, NULL, "ns3:SSOIdentityProviderErrorType");
	case SOAP_TYPE_PointerTons3__AssertionNotValidErrorType:
		return soap_in_PointerTons3__AssertionNotValidErrorType(soap, NULL, NULL, "ns3:AssertionNotValidErrorType");
	case SOAP_TYPE_PointerTons3__SSONameValuePairType:
		return soap_in_PointerTons3__SSONameValuePairType(soap, NULL, NULL, "ns3:SSONameValuePairType");
	case SOAP_TYPE_PointerTons3__SSOSessionType:
		return soap_in_PointerTons3__SSOSessionType(soap, NULL, NULL, "ns3:SSOSessionType");
	case SOAP_TYPE_PointerTons3__SSORoleType:
		return soap_in_PointerTons3__SSORoleType(soap, NULL, NULL, "ns3:SSORoleType");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons3__SSOUserType:
		return soap_in_PointerTons3__SSOUserType(soap, NULL, NULL, "ns3:SSOUserType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSONameValuePairType"))
		{	*type = SOAP_TYPE_ns3__SSONameValuePairType;
			return soap_in_ns3__SSONameValuePairType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSORoleType"))
		{	*type = SOAP_TYPE_ns3__SSORoleType;
			return soap_in_ns3__SSORoleType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSOUserType"))
		{	*type = SOAP_TYPE_ns3__SSOUserType;
			return soap_in_ns3__SSOUserType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSOSessionType"))
		{	*type = SOAP_TYPE_ns3__SSOSessionType;
			return soap_in_ns3__SSOSessionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:NoSuchSessionErrorType"))
		{	*type = SOAP_TYPE_ns3__NoSuchSessionErrorType;
			return soap_in_ns3__NoSuchSessionErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSOSessionErrorType"))
		{	*type = SOAP_TYPE_ns3__SSOSessionErrorType;
			return soap_in_ns3__SSOSessionErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SessionResponseType"))
		{	*type = SOAP_TYPE_ns3__SessionResponseType;
			return soap_in_ns3__SessionResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SessionRequestType"))
		{	*type = SOAP_TYPE_ns3__SessionRequestType;
			return soap_in_ns3__SessionRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AccessSessionResponseType"))
		{	*type = SOAP_TYPE_ns3__AccessSessionResponseType;
			return soap_in_ns3__AccessSessionResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AccessSessionRequestType"))
		{	*type = SOAP_TYPE_ns3__AccessSessionRequestType;
			return soap_in_ns3__AccessSessionRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:InvalidSessionErrorType"))
		{	*type = SOAP_TYPE_ns3__InvalidSessionErrorType;
			return soap_in_ns3__InvalidSessionErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:NoSuchUserErrorType"))
		{	*type = SOAP_TYPE_ns3__NoSuchUserErrorType;
			return soap_in_ns3__NoSuchUserErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSOIdentityManagerErrorType"))
		{	*type = SOAP_TYPE_ns3__SSOIdentityManagerErrorType;
			return soap_in_ns3__SSOIdentityManagerErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:UserExistsResponseType"))
		{	*type = SOAP_TYPE_ns3__UserExistsResponseType;
			return soap_in_ns3__UserExistsResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:UserExistsRequestType"))
		{	*type = SOAP_TYPE_ns3__UserExistsRequestType;
			return soap_in_ns3__UserExistsRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindRolesBySSOSessionIdResponseType"))
		{	*type = SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType;
			return soap_in_ns3__FindRolesBySSOSessionIdResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindRolesBySSOSessionIdRequestType"))
		{	*type = SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType;
			return soap_in_ns3__FindRolesBySSOSessionIdRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindUserInSecurityDomainResponseType"))
		{	*type = SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType;
			return soap_in_ns3__FindUserInSecurityDomainResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindUserInSecurityDomainRequestType"))
		{	*type = SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType;
			return soap_in_ns3__FindUserInSecurityDomainRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindUserInSessionResponseType"))
		{	*type = SOAP_TYPE_ns3__FindUserInSessionResponseType;
			return soap_in_ns3__FindUserInSessionResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:FindUserInSessionRequestType"))
		{	*type = SOAP_TYPE_ns3__FindUserInSessionRequestType;
			return soap_in_ns3__FindUserInSessionRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AssertionNotValidErrorType"))
		{	*type = SOAP_TYPE_ns3__AssertionNotValidErrorType;
			return soap_in_ns3__AssertionNotValidErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SSOIdentityProviderErrorType"))
		{	*type = SOAP_TYPE_ns3__SSOIdentityProviderErrorType;
			return soap_in_ns3__SSOIdentityProviderErrorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GlobalSignoffResponseType"))
		{	*type = SOAP_TYPE_ns3__GlobalSignoffResponseType;
			return soap_in_ns3__GlobalSignoffResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GlobalSignoffRequestType"))
		{	*type = SOAP_TYPE_ns3__GlobalSignoffRequestType;
			return soap_in_ns3__GlobalSignoffRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AssertIdentityWithSimpleAuthenticationResponseType"))
		{	*type = SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType;
			return soap_in_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AssertIdentityWithSimpleAuthenticationRequestType"))
		{	*type = SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType;
			return soap_in_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ResolveAuthenticationAssertionResponseType"))
		{	*type = SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType;
			return soap_in_ns3__ResolveAuthenticationAssertionResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ResolveAuthenticationAssertionRequestType"))
		{	*type = SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType;
			return soap_in_ns3__ResolveAuthenticationAssertionRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns3__SSONameValuePairType:
		return ((ns3__SSONameValuePairType *)ptr)->soap_out(soap, tag, id, "ns3:SSONameValuePairType");
	case SOAP_TYPE_ns3__SSORoleType:
		return ((ns3__SSORoleType *)ptr)->soap_out(soap, tag, id, "ns3:SSORoleType");
	case SOAP_TYPE_ns3__SSOUserType:
		return ((ns3__SSOUserType *)ptr)->soap_out(soap, tag, id, "ns3:SSOUserType");
	case SOAP_TYPE_ns3__SSOSessionType:
		return ((ns3__SSOSessionType *)ptr)->soap_out(soap, tag, id, "ns3:SSOSessionType");
	case SOAP_TYPE_ns3__NoSuchSessionErrorType:
		return ((ns3__NoSuchSessionErrorType *)ptr)->soap_out(soap, tag, id, "ns3:NoSuchSessionErrorType");
	case SOAP_TYPE_ns3__SSOSessionErrorType:
		return ((ns3__SSOSessionErrorType *)ptr)->soap_out(soap, tag, id, "ns3:SSOSessionErrorType");
	case SOAP_TYPE_ns3__SessionResponseType:
		return ((ns3__SessionResponseType *)ptr)->soap_out(soap, tag, id, "ns3:SessionResponseType");
	case SOAP_TYPE_ns3__SessionRequestType:
		return ((ns3__SessionRequestType *)ptr)->soap_out(soap, tag, id, "ns3:SessionRequestType");
	case SOAP_TYPE_ns3__AccessSessionResponseType:
		return ((ns3__AccessSessionResponseType *)ptr)->soap_out(soap, tag, id, "ns3:AccessSessionResponseType");
	case SOAP_TYPE_ns3__AccessSessionRequestType:
		return ((ns3__AccessSessionRequestType *)ptr)->soap_out(soap, tag, id, "ns3:AccessSessionRequestType");
	case SOAP_TYPE_ns3__InvalidSessionErrorType:
		return ((ns3__InvalidSessionErrorType *)ptr)->soap_out(soap, tag, id, "ns3:InvalidSessionErrorType");
	case SOAP_TYPE_ns3__NoSuchUserErrorType:
		return ((ns3__NoSuchUserErrorType *)ptr)->soap_out(soap, tag, id, "ns3:NoSuchUserErrorType");
	case SOAP_TYPE_ns3__SSOIdentityManagerErrorType:
		return ((ns3__SSOIdentityManagerErrorType *)ptr)->soap_out(soap, tag, id, "ns3:SSOIdentityManagerErrorType");
	case SOAP_TYPE_ns3__UserExistsResponseType:
		return ((ns3__UserExistsResponseType *)ptr)->soap_out(soap, tag, id, "ns3:UserExistsResponseType");
	case SOAP_TYPE_ns3__UserExistsRequestType:
		return ((ns3__UserExistsRequestType *)ptr)->soap_out(soap, tag, id, "ns3:UserExistsRequestType");
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType:
		return ((ns3__FindRolesBySSOSessionIdResponseType *)ptr)->soap_out(soap, tag, id, "ns3:FindRolesBySSOSessionIdResponseType");
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType:
		return ((ns3__FindRolesBySSOSessionIdRequestType *)ptr)->soap_out(soap, tag, id, "ns3:FindRolesBySSOSessionIdRequestType");
	case SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType:
		return ((ns3__FindUserInSecurityDomainResponseType *)ptr)->soap_out(soap, tag, id, "ns3:FindUserInSecurityDomainResponseType");
	case SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType:
		return ((ns3__FindUserInSecurityDomainRequestType *)ptr)->soap_out(soap, tag, id, "ns3:FindUserInSecurityDomainRequestType");
	case SOAP_TYPE_ns3__FindUserInSessionResponseType:
		return ((ns3__FindUserInSessionResponseType *)ptr)->soap_out(soap, tag, id, "ns3:FindUserInSessionResponseType");
	case SOAP_TYPE_ns3__FindUserInSessionRequestType:
		return ((ns3__FindUserInSessionRequestType *)ptr)->soap_out(soap, tag, id, "ns3:FindUserInSessionRequestType");
	case SOAP_TYPE_ns3__AssertionNotValidErrorType:
		return ((ns3__AssertionNotValidErrorType *)ptr)->soap_out(soap, tag, id, "ns3:AssertionNotValidErrorType");
	case SOAP_TYPE_ns3__SSOIdentityProviderErrorType:
		return ((ns3__SSOIdentityProviderErrorType *)ptr)->soap_out(soap, tag, id, "ns3:SSOIdentityProviderErrorType");
	case SOAP_TYPE_ns3__GlobalSignoffResponseType:
		return ((ns3__GlobalSignoffResponseType *)ptr)->soap_out(soap, tag, id, "ns3:GlobalSignoffResponseType");
	case SOAP_TYPE_ns3__GlobalSignoffRequestType:
		return ((ns3__GlobalSignoffRequestType *)ptr)->soap_out(soap, tag, id, "ns3:GlobalSignoffRequestType");
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType:
		return ((ns3__AssertIdentityWithSimpleAuthenticationResponseType *)ptr)->soap_out(soap, tag, id, "ns3:AssertIdentityWithSimpleAuthenticationResponseType");
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType:
		return ((ns3__AssertIdentityWithSimpleAuthenticationRequestType *)ptr)->soap_out(soap, tag, id, "ns3:AssertIdentityWithSimpleAuthenticationRequestType");
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType:
		return ((ns3__ResolveAuthenticationAssertionResponseType *)ptr)->soap_out(soap, tag, id, "ns3:ResolveAuthenticationAssertionResponseType");
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType:
		return ((ns3__ResolveAuthenticationAssertionRequestType *)ptr)->soap_out(soap, tag, id, "ns3:ResolveAuthenticationAssertionRequestType");
	case SOAP_TYPE_PointerTons3__SessionResponseType:
		return soap_out_PointerTons3__SessionResponseType(soap, tag, id, (ns3__SessionResponseType *const*)ptr, "ns3:SessionResponseType");
	case SOAP_TYPE_PointerTons3__SessionRequestType:
		return soap_out_PointerTons3__SessionRequestType(soap, tag, id, (ns3__SessionRequestType *const*)ptr, "ns3:SessionRequestType");
	case SOAP_TYPE_PointerTons3__AccessSessionResponseType:
		return soap_out_PointerTons3__AccessSessionResponseType(soap, tag, id, (ns3__AccessSessionResponseType *const*)ptr, "ns3:AccessSessionResponseType");
	case SOAP_TYPE_PointerTons3__AccessSessionRequestType:
		return soap_out_PointerTons3__AccessSessionRequestType(soap, tag, id, (ns3__AccessSessionRequestType *const*)ptr, "ns3:AccessSessionRequestType");
	case SOAP_TYPE_PointerTons3__UserExistsResponseType:
		return soap_out_PointerTons3__UserExistsResponseType(soap, tag, id, (ns3__UserExistsResponseType *const*)ptr, "ns3:UserExistsResponseType");
	case SOAP_TYPE_PointerTons3__UserExistsRequestType:
		return soap_out_PointerTons3__UserExistsRequestType(soap, tag, id, (ns3__UserExistsRequestType *const*)ptr, "ns3:UserExistsRequestType");
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdResponseType:
		return soap_out_PointerTons3__FindRolesBySSOSessionIdResponseType(soap, tag, id, (ns3__FindRolesBySSOSessionIdResponseType *const*)ptr, "ns3:FindRolesBySSOSessionIdResponseType");
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdRequestType:
		return soap_out_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, tag, id, (ns3__FindRolesBySSOSessionIdRequestType *const*)ptr, "ns3:FindRolesBySSOSessionIdRequestType");
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainResponseType:
		return soap_out_PointerTons3__FindUserInSecurityDomainResponseType(soap, tag, id, (ns3__FindUserInSecurityDomainResponseType *const*)ptr, "ns3:FindUserInSecurityDomainResponseType");
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainRequestType:
		return soap_out_PointerTons3__FindUserInSecurityDomainRequestType(soap, tag, id, (ns3__FindUserInSecurityDomainRequestType *const*)ptr, "ns3:FindUserInSecurityDomainRequestType");
	case SOAP_TYPE_PointerTons3__FindUserInSessionResponseType:
		return soap_out_PointerTons3__FindUserInSessionResponseType(soap, tag, id, (ns3__FindUserInSessionResponseType *const*)ptr, "ns3:FindUserInSessionResponseType");
	case SOAP_TYPE_PointerTons3__FindUserInSessionRequestType:
		return soap_out_PointerTons3__FindUserInSessionRequestType(soap, tag, id, (ns3__FindUserInSessionRequestType *const*)ptr, "ns3:FindUserInSessionRequestType");
	case SOAP_TYPE_PointerTons3__GlobalSignoffResponseType:
		return soap_out_PointerTons3__GlobalSignoffResponseType(soap, tag, id, (ns3__GlobalSignoffResponseType *const*)ptr, "ns3:GlobalSignoffResponseType");
	case SOAP_TYPE_PointerTons3__GlobalSignoffRequestType:
		return soap_out_PointerTons3__GlobalSignoffRequestType(soap, tag, id, (ns3__GlobalSignoffRequestType *const*)ptr, "ns3:GlobalSignoffRequestType");
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType:
		return soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, id, (ns3__AssertIdentityWithSimpleAuthenticationResponseType *const*)ptr, "ns3:AssertIdentityWithSimpleAuthenticationResponseType");
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType:
		return soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, id, (ns3__AssertIdentityWithSimpleAuthenticationRequestType *const*)ptr, "ns3:AssertIdentityWithSimpleAuthenticationRequestType");
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionResponseType:
		return soap_out_PointerTons3__ResolveAuthenticationAssertionResponseType(soap, tag, id, (ns3__ResolveAuthenticationAssertionResponseType *const*)ptr, "ns3:ResolveAuthenticationAssertionResponseType");
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionRequestType:
		return soap_out_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, tag, id, (ns3__ResolveAuthenticationAssertionRequestType *const*)ptr, "ns3:ResolveAuthenticationAssertionRequestType");
	case SOAP_TYPE_PointerTons3__SSOSessionErrorType:
		return soap_out_PointerTons3__SSOSessionErrorType(soap, tag, id, (ns3__SSOSessionErrorType *const*)ptr, "ns3:SSOSessionErrorType");
	case SOAP_TYPE_PointerTons3__NoSuchSessionErrorType:
		return soap_out_PointerTons3__NoSuchSessionErrorType(soap, tag, id, (ns3__NoSuchSessionErrorType *const*)ptr, "ns3:NoSuchSessionErrorType");
	case SOAP_TYPE_PointerTons3__SSOIdentityManagerErrorType:
		return soap_out_PointerTons3__SSOIdentityManagerErrorType(soap, tag, id, (ns3__SSOIdentityManagerErrorType *const*)ptr, "ns3:SSOIdentityManagerErrorType");
	case SOAP_TYPE_PointerTons3__NoSuchUserErrorType:
		return soap_out_PointerTons3__NoSuchUserErrorType(soap, tag, id, (ns3__NoSuchUserErrorType *const*)ptr, "ns3:NoSuchUserErrorType");
	case SOAP_TYPE_PointerTons3__InvalidSessionErrorType:
		return soap_out_PointerTons3__InvalidSessionErrorType(soap, tag, id, (ns3__InvalidSessionErrorType *const*)ptr, "ns3:InvalidSessionErrorType");
	case SOAP_TYPE_PointerTons3__SSOIdentityProviderErrorType:
		return soap_out_PointerTons3__SSOIdentityProviderErrorType(soap, tag, id, (ns3__SSOIdentityProviderErrorType *const*)ptr, "ns3:SSOIdentityProviderErrorType");
	case SOAP_TYPE_PointerTons3__AssertionNotValidErrorType:
		return soap_out_PointerTons3__AssertionNotValidErrorType(soap, tag, id, (ns3__AssertionNotValidErrorType *const*)ptr, "ns3:AssertionNotValidErrorType");
	case SOAP_TYPE_PointerTons3__SSONameValuePairType:
		return soap_out_PointerTons3__SSONameValuePairType(soap, tag, id, (ns3__SSONameValuePairType *const*)ptr, "ns3:SSONameValuePairType");
	case SOAP_TYPE_PointerTons3__SSOSessionType:
		return soap_out_PointerTons3__SSOSessionType(soap, tag, id, (ns3__SSOSessionType *const*)ptr, "ns3:SSOSessionType");
	case SOAP_TYPE_PointerTons3__SSORoleType:
		return soap_out_PointerTons3__SSORoleType(soap, tag, id, (ns3__SSORoleType *const*)ptr, "ns3:SSORoleType");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons3__SSOUserType:
		return soap_out_PointerTons3__SSOUserType(soap, tag, id, (ns3__SSOUserType *const*)ptr, "ns3:SSOUserType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__SSONameValuePairType:
		((ns3__SSONameValuePairType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSORoleType:
		((ns3__SSORoleType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSOUserType:
		((ns3__SSOUserType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSOSessionType:
		((ns3__SSOSessionType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__NoSuchSessionErrorType:
		((ns3__NoSuchSessionErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSOSessionErrorType:
		((ns3__SSOSessionErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SessionResponseType:
		((ns3__SessionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SessionRequestType:
		((ns3__SessionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__AccessSessionResponseType:
		((ns3__AccessSessionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__AccessSessionRequestType:
		((ns3__AccessSessionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__InvalidSessionErrorType:
		((ns3__InvalidSessionErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__NoSuchUserErrorType:
		((ns3__NoSuchUserErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSOIdentityManagerErrorType:
		((ns3__SSOIdentityManagerErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__UserExistsResponseType:
		((ns3__UserExistsResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__UserExistsRequestType:
		((ns3__UserExistsRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType:
		((ns3__FindRolesBySSOSessionIdResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType:
		((ns3__FindRolesBySSOSessionIdRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType:
		((ns3__FindUserInSecurityDomainResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType:
		((ns3__FindUserInSecurityDomainRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindUserInSessionResponseType:
		((ns3__FindUserInSessionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__FindUserInSessionRequestType:
		((ns3__FindUserInSessionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__AssertionNotValidErrorType:
		((ns3__AssertionNotValidErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__SSOIdentityProviderErrorType:
		((ns3__SSOIdentityProviderErrorType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__GlobalSignoffResponseType:
		((ns3__GlobalSignoffResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__GlobalSignoffRequestType:
		((ns3__GlobalSignoffRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType:
		((ns3__AssertIdentityWithSimpleAuthenticationResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType:
		((ns3__AssertIdentityWithSimpleAuthenticationRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType:
		((ns3__ResolveAuthenticationAssertionResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType:
		((ns3__ResolveAuthenticationAssertionRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns6__getSession:
		soap_serialize___ns6__getSession(soap, (const struct __ns6__getSession *)ptr);
		break;
	case SOAP_TYPE___ns6__accessSession:
		soap_serialize___ns6__accessSession(soap, (const struct __ns6__accessSession *)ptr);
		break;
	case SOAP_TYPE___ns5__userExists:
		soap_serialize___ns5__userExists(soap, (const struct __ns5__userExists *)ptr);
		break;
	case SOAP_TYPE___ns5__findRolesBySSOSessionId:
		soap_serialize___ns5__findRolesBySSOSessionId(soap, (const struct __ns5__findRolesBySSOSessionId *)ptr);
		break;
	case SOAP_TYPE___ns5__findUserInSecurityDomain:
		soap_serialize___ns5__findUserInSecurityDomain(soap, (const struct __ns5__findUserInSecurityDomain *)ptr);
		break;
	case SOAP_TYPE___ns5__findUserInSession:
		soap_serialize___ns5__findUserInSession(soap, (const struct __ns5__findUserInSession *)ptr);
		break;
	case SOAP_TYPE___ns4__globalSignoff:
		soap_serialize___ns4__globalSignoff(soap, (const struct __ns4__globalSignoff *)ptr);
		break;
	case SOAP_TYPE___ns4__assertIdentityWithSimpleAuthentication:
		soap_serialize___ns4__assertIdentityWithSimpleAuthentication(soap, (const struct __ns4__assertIdentityWithSimpleAuthentication *)ptr);
		break;
	case SOAP_TYPE___ns4__resolveAuthenticationAssertion:
		soap_serialize___ns4__resolveAuthenticationAssertion(soap, (const struct __ns4__resolveAuthenticationAssertion *)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SessionResponseType:
		soap_serialize_PointerTons3__SessionResponseType(soap, (ns3__SessionResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SessionRequestType:
		soap_serialize_PointerTons3__SessionRequestType(soap, (ns3__SessionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AccessSessionResponseType:
		soap_serialize_PointerTons3__AccessSessionResponseType(soap, (ns3__AccessSessionResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AccessSessionRequestType:
		soap_serialize_PointerTons3__AccessSessionRequestType(soap, (ns3__AccessSessionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__UserExistsResponseType:
		soap_serialize_PointerTons3__UserExistsResponseType(soap, (ns3__UserExistsResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__UserExistsRequestType:
		soap_serialize_PointerTons3__UserExistsRequestType(soap, (ns3__UserExistsRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdResponseType:
		soap_serialize_PointerTons3__FindRolesBySSOSessionIdResponseType(soap, (ns3__FindRolesBySSOSessionIdResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdRequestType:
		soap_serialize_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, (ns3__FindRolesBySSOSessionIdRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainResponseType:
		soap_serialize_PointerTons3__FindUserInSecurityDomainResponseType(soap, (ns3__FindUserInSecurityDomainResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindUserInSecurityDomainRequestType:
		soap_serialize_PointerTons3__FindUserInSecurityDomainRequestType(soap, (ns3__FindUserInSecurityDomainRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindUserInSessionResponseType:
		soap_serialize_PointerTons3__FindUserInSessionResponseType(soap, (ns3__FindUserInSessionResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__FindUserInSessionRequestType:
		soap_serialize_PointerTons3__FindUserInSessionRequestType(soap, (ns3__FindUserInSessionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__GlobalSignoffResponseType:
		soap_serialize_PointerTons3__GlobalSignoffResponseType(soap, (ns3__GlobalSignoffResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__GlobalSignoffRequestType:
		soap_serialize_PointerTons3__GlobalSignoffRequestType(soap, (ns3__GlobalSignoffRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType:
		soap_serialize_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(soap, (ns3__AssertIdentityWithSimpleAuthenticationResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType:
		soap_serialize_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, (ns3__AssertIdentityWithSimpleAuthenticationRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionResponseType:
		soap_serialize_PointerTons3__ResolveAuthenticationAssertionResponseType(soap, (ns3__ResolveAuthenticationAssertionResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionRequestType:
		soap_serialize_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, (ns3__ResolveAuthenticationAssertionRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSOSessionErrorType:
		soap_serialize_PointerTons3__SSOSessionErrorType(soap, (ns3__SSOSessionErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__NoSuchSessionErrorType:
		soap_serialize_PointerTons3__NoSuchSessionErrorType(soap, (ns3__NoSuchSessionErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSOIdentityManagerErrorType:
		soap_serialize_PointerTons3__SSOIdentityManagerErrorType(soap, (ns3__SSOIdentityManagerErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__NoSuchUserErrorType:
		soap_serialize_PointerTons3__NoSuchUserErrorType(soap, (ns3__NoSuchUserErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__InvalidSessionErrorType:
		soap_serialize_PointerTons3__InvalidSessionErrorType(soap, (ns3__InvalidSessionErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSOIdentityProviderErrorType:
		soap_serialize_PointerTons3__SSOIdentityProviderErrorType(soap, (ns3__SSOIdentityProviderErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AssertionNotValidErrorType:
		soap_serialize_PointerTons3__AssertionNotValidErrorType(soap, (ns3__AssertionNotValidErrorType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSONameValuePairType:
		soap_serialize_PointerTons3__SSONameValuePairType(soap, (ns3__SSONameValuePairType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSOSessionType:
		soap_serialize_PointerTons3__SSOSessionType(soap, (ns3__SSOSessionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSORoleType:
		soap_serialize_PointerTons3__SSORoleType(soap, (ns3__SSORoleType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__SSOUserType:
		soap_serialize_PointerTons3__SSOUserType(soap, (ns3__SSOUserType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType:
		return (void*)soap_instantiate_ns3__ResolveAuthenticationAssertionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType:
		return (void*)soap_instantiate_ns3__ResolveAuthenticationAssertionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType:
		return (void*)soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType:
		return (void*)soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__GlobalSignoffRequestType:
		return (void*)soap_instantiate_ns3__GlobalSignoffRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__GlobalSignoffResponseType:
		return (void*)soap_instantiate_ns3__GlobalSignoffResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSOIdentityProviderErrorType:
		return (void*)soap_instantiate_ns3__SSOIdentityProviderErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AssertionNotValidErrorType:
		return (void*)soap_instantiate_ns3__AssertionNotValidErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindUserInSessionRequestType:
		return (void*)soap_instantiate_ns3__FindUserInSessionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindUserInSessionResponseType:
		return (void*)soap_instantiate_ns3__FindUserInSessionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType:
		return (void*)soap_instantiate_ns3__FindUserInSecurityDomainRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType:
		return (void*)soap_instantiate_ns3__FindUserInSecurityDomainResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType:
		return (void*)soap_instantiate_ns3__FindRolesBySSOSessionIdRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType:
		return (void*)soap_instantiate_ns3__FindRolesBySSOSessionIdResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__UserExistsRequestType:
		return (void*)soap_instantiate_ns3__UserExistsRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__UserExistsResponseType:
		return (void*)soap_instantiate_ns3__UserExistsResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSOIdentityManagerErrorType:
		return (void*)soap_instantiate_ns3__SSOIdentityManagerErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__NoSuchUserErrorType:
		return (void*)soap_instantiate_ns3__NoSuchUserErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__InvalidSessionErrorType:
		return (void*)soap_instantiate_ns3__InvalidSessionErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AccessSessionRequestType:
		return (void*)soap_instantiate_ns3__AccessSessionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AccessSessionResponseType:
		return (void*)soap_instantiate_ns3__AccessSessionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SessionRequestType:
		return (void*)soap_instantiate_ns3__SessionRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SessionResponseType:
		return (void*)soap_instantiate_ns3__SessionResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSOSessionErrorType:
		return (void*)soap_instantiate_ns3__SSOSessionErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__NoSuchSessionErrorType:
		return (void*)soap_instantiate_ns3__NoSuchSessionErrorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSOSessionType:
		return (void*)soap_instantiate_ns3__SSOSessionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSOUserType:
		return (void*)soap_instantiate_ns3__SSOUserType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSORoleType:
		return (void*)soap_instantiate_ns3__SSORoleType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__SSONameValuePairType:
		return (void*)soap_instantiate_ns3__SSONameValuePairType(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns4__resolveAuthenticationAssertion:
		return (void*)soap_instantiate___ns4__resolveAuthenticationAssertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__assertIdentityWithSimpleAuthentication:
		return (void*)soap_instantiate___ns4__assertIdentityWithSimpleAuthentication(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__globalSignoff:
		return (void*)soap_instantiate___ns4__globalSignoff(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns5__findUserInSession:
		return (void*)soap_instantiate___ns5__findUserInSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns5__findUserInSecurityDomain:
		return (void*)soap_instantiate___ns5__findUserInSecurityDomain(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns5__findRolesBySSOSessionId:
		return (void*)soap_instantiate___ns5__findRolesBySSOSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns5__userExists:
		return (void*)soap_instantiate___ns5__userExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__accessSession:
		return (void*)soap_instantiate___ns6__accessSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__getSession:
		return (void*)soap_instantiate___ns6__getSession(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSONameValuePairType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSORoleType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__SSORoleType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType:
		if (p->size < 0)
			delete (ns3__ResolveAuthenticationAssertionRequestType*)p->ptr;
		else
			delete[] (ns3__ResolveAuthenticationAssertionRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType:
		if (p->size < 0)
			delete (ns3__ResolveAuthenticationAssertionResponseType*)p->ptr;
		else
			delete[] (ns3__ResolveAuthenticationAssertionResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType:
		if (p->size < 0)
			delete (ns3__AssertIdentityWithSimpleAuthenticationRequestType*)p->ptr;
		else
			delete[] (ns3__AssertIdentityWithSimpleAuthenticationRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType:
		if (p->size < 0)
			delete (ns3__AssertIdentityWithSimpleAuthenticationResponseType*)p->ptr;
		else
			delete[] (ns3__AssertIdentityWithSimpleAuthenticationResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__GlobalSignoffRequestType:
		if (p->size < 0)
			delete (ns3__GlobalSignoffRequestType*)p->ptr;
		else
			delete[] (ns3__GlobalSignoffRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__GlobalSignoffResponseType:
		if (p->size < 0)
			delete (ns3__GlobalSignoffResponseType*)p->ptr;
		else
			delete[] (ns3__GlobalSignoffResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSOIdentityProviderErrorType:
		if (p->size < 0)
			delete (ns3__SSOIdentityProviderErrorType*)p->ptr;
		else
			delete[] (ns3__SSOIdentityProviderErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AssertionNotValidErrorType:
		if (p->size < 0)
			delete (ns3__AssertionNotValidErrorType*)p->ptr;
		else
			delete[] (ns3__AssertionNotValidErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindUserInSessionRequestType:
		if (p->size < 0)
			delete (ns3__FindUserInSessionRequestType*)p->ptr;
		else
			delete[] (ns3__FindUserInSessionRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindUserInSessionResponseType:
		if (p->size < 0)
			delete (ns3__FindUserInSessionResponseType*)p->ptr;
		else
			delete[] (ns3__FindUserInSessionResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType:
		if (p->size < 0)
			delete (ns3__FindUserInSecurityDomainRequestType*)p->ptr;
		else
			delete[] (ns3__FindUserInSecurityDomainRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType:
		if (p->size < 0)
			delete (ns3__FindUserInSecurityDomainResponseType*)p->ptr;
		else
			delete[] (ns3__FindUserInSecurityDomainResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType:
		if (p->size < 0)
			delete (ns3__FindRolesBySSOSessionIdRequestType*)p->ptr;
		else
			delete[] (ns3__FindRolesBySSOSessionIdRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType:
		if (p->size < 0)
			delete (ns3__FindRolesBySSOSessionIdResponseType*)p->ptr;
		else
			delete[] (ns3__FindRolesBySSOSessionIdResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__UserExistsRequestType:
		if (p->size < 0)
			delete (ns3__UserExistsRequestType*)p->ptr;
		else
			delete[] (ns3__UserExistsRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__UserExistsResponseType:
		if (p->size < 0)
			delete (ns3__UserExistsResponseType*)p->ptr;
		else
			delete[] (ns3__UserExistsResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSOIdentityManagerErrorType:
		if (p->size < 0)
			delete (ns3__SSOIdentityManagerErrorType*)p->ptr;
		else
			delete[] (ns3__SSOIdentityManagerErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__NoSuchUserErrorType:
		if (p->size < 0)
			delete (ns3__NoSuchUserErrorType*)p->ptr;
		else
			delete[] (ns3__NoSuchUserErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__InvalidSessionErrorType:
		if (p->size < 0)
			delete (ns3__InvalidSessionErrorType*)p->ptr;
		else
			delete[] (ns3__InvalidSessionErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AccessSessionRequestType:
		if (p->size < 0)
			delete (ns3__AccessSessionRequestType*)p->ptr;
		else
			delete[] (ns3__AccessSessionRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AccessSessionResponseType:
		if (p->size < 0)
			delete (ns3__AccessSessionResponseType*)p->ptr;
		else
			delete[] (ns3__AccessSessionResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SessionRequestType:
		if (p->size < 0)
			delete (ns3__SessionRequestType*)p->ptr;
		else
			delete[] (ns3__SessionRequestType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SessionResponseType:
		if (p->size < 0)
			delete (ns3__SessionResponseType*)p->ptr;
		else
			delete[] (ns3__SessionResponseType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSOSessionErrorType:
		if (p->size < 0)
			delete (ns3__SSOSessionErrorType*)p->ptr;
		else
			delete[] (ns3__SSOSessionErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__NoSuchSessionErrorType:
		if (p->size < 0)
			delete (ns3__NoSuchSessionErrorType*)p->ptr;
		else
			delete[] (ns3__NoSuchSessionErrorType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSOSessionType:
		if (p->size < 0)
			delete (ns3__SSOSessionType*)p->ptr;
		else
			delete[] (ns3__SSOSessionType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSOUserType:
		if (p->size < 0)
			delete (ns3__SSOUserType*)p->ptr;
		else
			delete[] (ns3__SSOUserType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSORoleType:
		if (p->size < 0)
			delete (ns3__SSORoleType*)p->ptr;
		else
			delete[] (ns3__SSORoleType*)p->ptr;
		break;
	case SOAP_TYPE_ns3__SSONameValuePairType:
		if (p->size < 0)
			delete (ns3__SSONameValuePairType*)p->ptr;
		else
			delete[] (ns3__SSONameValuePairType*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE___ns4__resolveAuthenticationAssertion:
		if (p->size < 0)
			delete (struct __ns4__resolveAuthenticationAssertion*)p->ptr;
		else
			delete[] (struct __ns4__resolveAuthenticationAssertion*)p->ptr;
		break;
	case SOAP_TYPE___ns4__assertIdentityWithSimpleAuthentication:
		if (p->size < 0)
			delete (struct __ns4__assertIdentityWithSimpleAuthentication*)p->ptr;
		else
			delete[] (struct __ns4__assertIdentityWithSimpleAuthentication*)p->ptr;
		break;
	case SOAP_TYPE___ns4__globalSignoff:
		if (p->size < 0)
			delete (struct __ns4__globalSignoff*)p->ptr;
		else
			delete[] (struct __ns4__globalSignoff*)p->ptr;
		break;
	case SOAP_TYPE___ns5__findUserInSession:
		if (p->size < 0)
			delete (struct __ns5__findUserInSession*)p->ptr;
		else
			delete[] (struct __ns5__findUserInSession*)p->ptr;
		break;
	case SOAP_TYPE___ns5__findUserInSecurityDomain:
		if (p->size < 0)
			delete (struct __ns5__findUserInSecurityDomain*)p->ptr;
		else
			delete[] (struct __ns5__findUserInSecurityDomain*)p->ptr;
		break;
	case SOAP_TYPE___ns5__findRolesBySSOSessionId:
		if (p->size < 0)
			delete (struct __ns5__findRolesBySSOSessionId*)p->ptr;
		else
			delete[] (struct __ns5__findRolesBySSOSessionId*)p->ptr;
		break;
	case SOAP_TYPE___ns5__userExists:
		if (p->size < 0)
			delete (struct __ns5__userExists*)p->ptr;
		else
			delete[] (struct __ns5__userExists*)p->ptr;
		break;
	case SOAP_TYPE___ns6__accessSession:
		if (p->size < 0)
			delete (struct __ns6__accessSession*)p->ptr;
		else
			delete[] (struct __ns6__accessSession*)p->ptr;
		break;
	case SOAP_TYPE___ns6__getSession:
		if (p->size < 0)
			delete (struct __ns6__getSession*)p->ptr;
		else
			delete[] (struct __ns6__getSession*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSONameValuePairType:
		if (p->size < 0)
			delete (std::vector<ns3__SSONameValuePairType * >*)p->ptr;
		else
			delete[] (std::vector<ns3__SSONameValuePairType * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSORoleType:
		if (p->size < 0)
			delete (std::vector<ns3__SSORoleType * >*)p->ptr;
		else
			delete[] (std::vector<ns3__SSORoleType * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSONameValuePairType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__SSONameValuePairType * >*)p)[len] = *(ns3__SSONameValuePairType **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSORoleType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns3__SSORoleType * >*)p)[len] = *(ns3__SSORoleType **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns3__SSONameValuePairType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSONameValuePairType::name);
	soap_default_std__string(soap, &this->ns3__SSONameValuePairType::value);
	/* transient soap skipped */
}

void ns3__SSONameValuePairType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns3__SSONameValuePairType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSONameValuePairType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSONameValuePairType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSONameValuePairType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSONameValuePairType(struct soap *soap, const char *tag, int id, const ns3__SSONameValuePairType *a, const char *type)
{
	if (!((ns3__SSONameValuePairType*)a)->name.empty())
		soap_set_attr(soap, "name", ((ns3__SSONameValuePairType*)a)->name.c_str(), 1);
	if (!((ns3__SSONameValuePairType*)a)->value.empty())
		soap_set_attr(soap, "value", ((ns3__SSONameValuePairType*)a)->value.c_str(), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSONameValuePairType), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSONameValuePairType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSONameValuePairType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSONameValuePairType * SOAP_FMAC4 soap_get_ns3__SSONameValuePairType(struct soap *soap, ns3__SSONameValuePairType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSONameValuePairType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSONameValuePairType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSONameValuePairType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSONameValuePairType * SOAP_FMAC4 soap_in_ns3__SSONameValuePairType(struct soap *soap, const char *tag, ns3__SSONameValuePairType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSONameValuePairType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSONameValuePairType, sizeof(ns3__SSONameValuePairType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSONameValuePairType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSONameValuePairType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "name", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, -1, -1))
				return NULL;
			((ns3__SSONameValuePairType*)a)->name.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "value", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, -1, -1))
				return NULL;
			((ns3__SSONameValuePairType*)a)->value.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSONameValuePairType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSONameValuePairType, 0, sizeof(ns3__SSONameValuePairType), 0, soap_copy_ns3__SSONameValuePairType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSONameValuePairType * SOAP_FMAC4 soap_instantiate_ns3__SSONameValuePairType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSONameValuePairType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSONameValuePairType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSONameValuePairType);
		if (size)
			*size = sizeof(ns3__SSONameValuePairType);
		((ns3__SSONameValuePairType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSONameValuePairType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSONameValuePairType);
		for (int i = 0; i < n; i++)
			((ns3__SSONameValuePairType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSONameValuePairType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSONameValuePairType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSONameValuePairType %p -> %p\n", q, p));
	*(ns3__SSONameValuePairType*)p = *(ns3__SSONameValuePairType*)q;
}

void ns3__SSORoleType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSORoleType::name);
	/* transient soap skipped */
}

void ns3__SSORoleType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns3__SSORoleType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSORoleType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSORoleType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSORoleType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSORoleType(struct soap *soap, const char *tag, int id, const ns3__SSORoleType *a, const char *type)
{
	if (!((ns3__SSORoleType*)a)->name.empty())
		soap_set_attr(soap, "name", ((ns3__SSORoleType*)a)->name.c_str(), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSORoleType), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSORoleType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSORoleType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSORoleType * SOAP_FMAC4 soap_get_ns3__SSORoleType(struct soap *soap, ns3__SSORoleType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSORoleType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSORoleType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSORoleType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSORoleType * SOAP_FMAC4 soap_in_ns3__SSORoleType(struct soap *soap, const char *tag, ns3__SSORoleType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSORoleType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSORoleType, sizeof(ns3__SSORoleType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSORoleType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSORoleType *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "name", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, -1, -1))
				return NULL;
			((ns3__SSORoleType*)a)->name.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSORoleType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSORoleType, 0, sizeof(ns3__SSORoleType), 0, soap_copy_ns3__SSORoleType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSORoleType * SOAP_FMAC4 soap_instantiate_ns3__SSORoleType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSORoleType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSORoleType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSORoleType);
		if (size)
			*size = sizeof(ns3__SSORoleType);
		((ns3__SSORoleType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSORoleType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSORoleType);
		for (int i = 0; i < n; i++)
			((ns3__SSORoleType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSORoleType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSORoleType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSORoleType %p -> %p\n", q, p));
	*(ns3__SSORoleType*)p = *(ns3__SSORoleType*)q;
}

void ns3__SSOUserType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, &this->ns3__SSOUserType::properties);
	soap_default_std__string(soap, &this->ns3__SSOUserType::name);
	soap_default_std__string(soap, &this->ns3__SSOUserType::securitydomain);
	/* transient soap skipped */
}

void ns3__SSOUserType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, &this->ns3__SSOUserType::properties);
	soap_embedded(soap, &this->ns3__SSOUserType::name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOUserType::name);
	soap_embedded(soap, &this->ns3__SSOUserType::securitydomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOUserType::securitydomain);
	/* transient soap skipped */
}

int ns3__SSOUserType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSOUserType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSOUserType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSOUserType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSOUserType(struct soap *soap, const char *tag, int id, const ns3__SSOUserType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSOUserType), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, "ns3:properties", -1, &(a->ns3__SSOUserType::properties), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:name", -1, &(a->ns3__SSOUserType::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securitydomain", -1, &(a->ns3__SSOUserType::securitydomain), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSOUserType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSOUserType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSOUserType * SOAP_FMAC4 soap_get_ns3__SSOUserType(struct soap *soap, ns3__SSOUserType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSOUserType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSOUserType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSOUserType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSOUserType * SOAP_FMAC4 soap_in_ns3__SSOUserType(struct soap *soap, const char *tag, ns3__SSOUserType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSOUserType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSOUserType, sizeof(ns3__SSOUserType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSOUserType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSOUserType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_securitydomain1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, "ns3:properties", &(a->ns3__SSOUserType::properties), "ns3:SSONameValuePairType"))
					continue;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:name", &(a->ns3__SSOUserType::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_securitydomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securitydomain", &(a->ns3__SSOUserType::securitydomain), "xsd:string"))
				{	soap_flag_securitydomain1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSOUserType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSOUserType, 0, sizeof(ns3__SSOUserType), 0, soap_copy_ns3__SSOUserType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name1 > 0 || soap_flag_securitydomain1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSOUserType * SOAP_FMAC4 soap_instantiate_ns3__SSOUserType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSOUserType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSOUserType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSOUserType);
		if (size)
			*size = sizeof(ns3__SSOUserType);
		((ns3__SSOUserType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSOUserType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSOUserType);
		for (int i = 0; i < n; i++)
			((ns3__SSOUserType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSOUserType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSOUserType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSOUserType %p -> %p\n", q, p));
	*(ns3__SSOUserType*)p = *(ns3__SSOUserType*)q;
}

void ns3__SSOSessionType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSOSessionType::id);
	soap_default_LONG64(soap, &this->ns3__SSOSessionType::creationTime);
	soap_default_LONG64(soap, &this->ns3__SSOSessionType::lastAccessTime);
	soap_default_int(soap, &this->ns3__SSOSessionType::maxInactiveInterval);
	soap_default_std__string(soap, &this->ns3__SSOSessionType::username);
	soap_default_LONG64(soap, &this->ns3__SSOSessionType::accessCount);
	soap_default_bool(soap, &this->ns3__SSOSessionType::valid);
	/* transient soap skipped */
}

void ns3__SSOSessionType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__SSOSessionType::id, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOSessionType::id);
	soap_embedded(soap, &this->ns3__SSOSessionType::username, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOSessionType::username);
	/* transient soap skipped */
}

int ns3__SSOSessionType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSOSessionType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSOSessionType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSOSessionType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSOSessionType(struct soap *soap, const char *tag, int id, const ns3__SSOSessionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSOSessionType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:id", -1, &(a->ns3__SSOSessionType::id), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "ns3:creationTime", -1, &(a->ns3__SSOSessionType::creationTime), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "ns3:lastAccessTime", -1, &(a->ns3__SSOSessionType::lastAccessTime), ""))
		return soap->error;
	if (soap_out_int(soap, "ns3:maxInactiveInterval", -1, &(a->ns3__SSOSessionType::maxInactiveInterval), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:username", -1, &(a->ns3__SSOSessionType::username), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "ns3:accessCount", -1, &(a->ns3__SSOSessionType::accessCount), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns3:valid", -1, &(a->ns3__SSOSessionType::valid), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSOSessionType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSOSessionType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSOSessionType * SOAP_FMAC4 soap_get_ns3__SSOSessionType(struct soap *soap, ns3__SSOSessionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSOSessionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSOSessionType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSOSessionType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSOSessionType * SOAP_FMAC4 soap_in_ns3__SSOSessionType(struct soap *soap, const char *tag, ns3__SSOSessionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSOSessionType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSOSessionType, sizeof(ns3__SSOSessionType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSOSessionType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSOSessionType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_creationTime1 = 1;
	size_t soap_flag_lastAccessTime1 = 1;
	size_t soap_flag_maxInactiveInterval1 = 1;
	size_t soap_flag_username1 = 1;
	size_t soap_flag_accessCount1 = 1;
	size_t soap_flag_valid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:id", &(a->ns3__SSOSessionType::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_creationTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ns3:creationTime", &(a->ns3__SSOSessionType::creationTime), "xsd:long"))
				{	soap_flag_creationTime1--;
					continue;
				}
			if (soap_flag_lastAccessTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ns3:lastAccessTime", &(a->ns3__SSOSessionType::lastAccessTime), "xsd:long"))
				{	soap_flag_lastAccessTime1--;
					continue;
				}
			if (soap_flag_maxInactiveInterval1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns3:maxInactiveInterval", &(a->ns3__SSOSessionType::maxInactiveInterval), "xsd:int"))
				{	soap_flag_maxInactiveInterval1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:username", &(a->ns3__SSOSessionType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_accessCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ns3:accessCount", &(a->ns3__SSOSessionType::accessCount), "xsd:long"))
				{	soap_flag_accessCount1--;
					continue;
				}
			if (soap_flag_valid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns3:valid", &(a->ns3__SSOSessionType::valid), "xsd:boolean"))
				{	soap_flag_valid1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSOSessionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSOSessionType, 0, sizeof(ns3__SSOSessionType), 0, soap_copy_ns3__SSOSessionType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_creationTime1 > 0 || soap_flag_lastAccessTime1 > 0 || soap_flag_maxInactiveInterval1 > 0 || soap_flag_username1 > 0 || soap_flag_accessCount1 > 0 || soap_flag_valid1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSOSessionType * SOAP_FMAC4 soap_instantiate_ns3__SSOSessionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSOSessionType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSOSessionType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSOSessionType);
		if (size)
			*size = sizeof(ns3__SSOSessionType);
		((ns3__SSOSessionType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSOSessionType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSOSessionType);
		for (int i = 0; i < n; i++)
			((ns3__SSOSessionType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSOSessionType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSOSessionType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSOSessionType %p -> %p\n", q, p));
	*(ns3__SSOSessionType*)p = *(ns3__SSOSessionType*)q;
}

void ns3__NoSuchSessionErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__NoSuchSessionErrorType::sessionId);
	/* transient soap skipped */
}

void ns3__NoSuchSessionErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__NoSuchSessionErrorType::sessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__NoSuchSessionErrorType::sessionId);
	/* transient soap skipped */
}

int ns3__NoSuchSessionErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__NoSuchSessionErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__NoSuchSessionErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__NoSuchSessionErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NoSuchSessionErrorType(struct soap *soap, const char *tag, int id, const ns3__NoSuchSessionErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__NoSuchSessionErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:sessionId", -1, &(a->ns3__NoSuchSessionErrorType::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__NoSuchSessionErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__NoSuchSessionErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__NoSuchSessionErrorType * SOAP_FMAC4 soap_get_ns3__NoSuchSessionErrorType(struct soap *soap, ns3__NoSuchSessionErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__NoSuchSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__NoSuchSessionErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__NoSuchSessionErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__NoSuchSessionErrorType * SOAP_FMAC4 soap_in_ns3__NoSuchSessionErrorType(struct soap *soap, const char *tag, ns3__NoSuchSessionErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__NoSuchSessionErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__NoSuchSessionErrorType, sizeof(ns3__NoSuchSessionErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__NoSuchSessionErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__NoSuchSessionErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:sessionId", &(a->ns3__NoSuchSessionErrorType::sessionId), "xsd:string"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__NoSuchSessionErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__NoSuchSessionErrorType, 0, sizeof(ns3__NoSuchSessionErrorType), 0, soap_copy_ns3__NoSuchSessionErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__NoSuchSessionErrorType * SOAP_FMAC4 soap_instantiate_ns3__NoSuchSessionErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__NoSuchSessionErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__NoSuchSessionErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__NoSuchSessionErrorType);
		if (size)
			*size = sizeof(ns3__NoSuchSessionErrorType);
		((ns3__NoSuchSessionErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__NoSuchSessionErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__NoSuchSessionErrorType);
		for (int i = 0; i < n; i++)
			((ns3__NoSuchSessionErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__NoSuchSessionErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__NoSuchSessionErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__NoSuchSessionErrorType %p -> %p\n", q, p));
	*(ns3__NoSuchSessionErrorType*)p = *(ns3__NoSuchSessionErrorType*)q;
}

void ns3__SSOSessionErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSOSessionErrorType::errMessage);
	/* transient soap skipped */
}

void ns3__SSOSessionErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__SSOSessionErrorType::errMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOSessionErrorType::errMessage);
	/* transient soap skipped */
}

int ns3__SSOSessionErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSOSessionErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSOSessionErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSOSessionErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSOSessionErrorType(struct soap *soap, const char *tag, int id, const ns3__SSOSessionErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSOSessionErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:errMessage", -1, &(a->ns3__SSOSessionErrorType::errMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSOSessionErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSOSessionErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSOSessionErrorType * SOAP_FMAC4 soap_get_ns3__SSOSessionErrorType(struct soap *soap, ns3__SSOSessionErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSOSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSOSessionErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSOSessionErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSOSessionErrorType * SOAP_FMAC4 soap_in_ns3__SSOSessionErrorType(struct soap *soap, const char *tag, ns3__SSOSessionErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSOSessionErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSOSessionErrorType, sizeof(ns3__SSOSessionErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSOSessionErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSOSessionErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:errMessage", &(a->ns3__SSOSessionErrorType::errMessage), "xsd:string"))
				{	soap_flag_errMessage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSOSessionErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSOSessionErrorType, 0, sizeof(ns3__SSOSessionErrorType), 0, soap_copy_ns3__SSOSessionErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errMessage1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSOSessionErrorType * SOAP_FMAC4 soap_instantiate_ns3__SSOSessionErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSOSessionErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSOSessionErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSOSessionErrorType);
		if (size)
			*size = sizeof(ns3__SSOSessionErrorType);
		((ns3__SSOSessionErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSOSessionErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSOSessionErrorType);
		for (int i = 0; i < n; i++)
			((ns3__SSOSessionErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSOSessionErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSOSessionErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSOSessionErrorType %p -> %p\n", q, p));
	*(ns3__SSOSessionErrorType*)p = *(ns3__SSOSessionErrorType*)q;
}

void ns3__SessionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__SessionResponseType::ns3__SSOSession = NULL;
	/* transient soap skipped */
}

void ns3__SessionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__SSOSessionType(soap, &this->ns3__SessionResponseType::ns3__SSOSession);
	/* transient soap skipped */
}

int ns3__SessionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SessionResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SessionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SessionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SessionResponseType(struct soap *soap, const char *tag, int id, const ns3__SessionResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SessionResponseType), type))
		return soap->error;
	if (a->ns3__SSOSession)
		soap_element_result(soap, "ns3:SSOSession");
	if (soap_out_PointerTons3__SSOSessionType(soap, "ns3:SSOSession", -1, &(a->ns3__SessionResponseType::ns3__SSOSession), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SessionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SessionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SessionResponseType * SOAP_FMAC4 soap_get_ns3__SessionResponseType(struct soap *soap, ns3__SessionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SessionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SessionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SessionResponseType * SOAP_FMAC4 soap_in_ns3__SessionResponseType(struct soap *soap, const char *tag, ns3__SessionResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SessionResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SessionResponseType, sizeof(ns3__SessionResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SessionResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SessionResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ns3__SSOSession1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__SSOSession1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOSessionType(soap, "ns3:SSOSession", &(a->ns3__SessionResponseType::ns3__SSOSession), "ns3:SSOSessionType"))
				{	soap_flag_ns3__SSOSession1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:SSOSession");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SessionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SessionResponseType, 0, sizeof(ns3__SessionResponseType), 0, soap_copy_ns3__SessionResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns3__SSOSession1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SessionResponseType * SOAP_FMAC4 soap_instantiate_ns3__SessionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SessionResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SessionResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SessionResponseType);
		if (size)
			*size = sizeof(ns3__SessionResponseType);
		((ns3__SessionResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SessionResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SessionResponseType);
		for (int i = 0; i < n; i++)
			((ns3__SessionResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SessionResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SessionResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SessionResponseType %p -> %p\n", q, p));
	*(ns3__SessionResponseType*)p = *(ns3__SessionResponseType*)q;
}

void ns3__SessionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SessionRequestType::requester);
	soap_default_std__string(soap, &this->ns3__SessionRequestType::sessionId);
	/* transient soap skipped */
}

void ns3__SessionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__SessionRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SessionRequestType::requester);
	soap_embedded(soap, &this->ns3__SessionRequestType::sessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SessionRequestType::sessionId);
	/* transient soap skipped */
}

int ns3__SessionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SessionRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SessionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SessionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SessionRequestType(struct soap *soap, const char *tag, int id, const ns3__SessionRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SessionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__SessionRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:sessionId", -1, &(a->ns3__SessionRequestType::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SessionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SessionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SessionRequestType * SOAP_FMAC4 soap_get_ns3__SessionRequestType(struct soap *soap, ns3__SessionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SessionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SessionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SessionRequestType * SOAP_FMAC4 soap_in_ns3__SessionRequestType(struct soap *soap, const char *tag, ns3__SessionRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SessionRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SessionRequestType, sizeof(ns3__SessionRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SessionRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SessionRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__SessionRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_sessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:sessionId", &(a->ns3__SessionRequestType::sessionId), "xsd:string"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SessionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SessionRequestType, 0, sizeof(ns3__SessionRequestType), 0, soap_copy_ns3__SessionRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SessionRequestType * SOAP_FMAC4 soap_instantiate_ns3__SessionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SessionRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SessionRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SessionRequestType);
		if (size)
			*size = sizeof(ns3__SessionRequestType);
		((ns3__SessionRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SessionRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SessionRequestType);
		for (int i = 0; i < n; i++)
			((ns3__SessionRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SessionRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SessionRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SessionRequestType %p -> %p\n", q, p));
	*(ns3__SessionRequestType*)p = *(ns3__SessionRequestType*)q;
}

void ns3__AccessSessionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__AccessSessionResponseType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__AccessSessionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__AccessSessionResponseType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AccessSessionResponseType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__AccessSessionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AccessSessionResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AccessSessionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AccessSessionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AccessSessionResponseType(struct soap *soap, const char *tag, int id, const ns3__AccessSessionResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AccessSessionResponseType), type))
		return soap->error;
	soap_element_result(soap, "ns3:ssoSessionId");
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__AccessSessionResponseType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AccessSessionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AccessSessionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AccessSessionResponseType * SOAP_FMAC4 soap_get_ns3__AccessSessionResponseType(struct soap *soap, ns3__AccessSessionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AccessSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AccessSessionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AccessSessionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AccessSessionResponseType * SOAP_FMAC4 soap_in_ns3__AccessSessionResponseType(struct soap *soap, const char *tag, ns3__AccessSessionResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AccessSessionResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AccessSessionResponseType, sizeof(ns3__AccessSessionResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AccessSessionResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AccessSessionResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__AccessSessionResponseType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:ssoSessionId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AccessSessionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AccessSessionResponseType, 0, sizeof(ns3__AccessSessionResponseType), 0, soap_copy_ns3__AccessSessionResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AccessSessionResponseType * SOAP_FMAC4 soap_instantiate_ns3__AccessSessionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AccessSessionResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AccessSessionResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__AccessSessionResponseType);
		if (size)
			*size = sizeof(ns3__AccessSessionResponseType);
		((ns3__AccessSessionResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__AccessSessionResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AccessSessionResponseType);
		for (int i = 0; i < n; i++)
			((ns3__AccessSessionResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AccessSessionResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AccessSessionResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AccessSessionResponseType %p -> %p\n", q, p));
	*(ns3__AccessSessionResponseType*)p = *(ns3__AccessSessionResponseType*)q;
}

void ns3__AccessSessionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__AccessSessionRequestType::requester);
	soap_default_std__string(soap, &this->ns3__AccessSessionRequestType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__AccessSessionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__AccessSessionRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AccessSessionRequestType::requester);
	soap_embedded(soap, &this->ns3__AccessSessionRequestType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AccessSessionRequestType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__AccessSessionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AccessSessionRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AccessSessionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AccessSessionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AccessSessionRequestType(struct soap *soap, const char *tag, int id, const ns3__AccessSessionRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AccessSessionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__AccessSessionRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__AccessSessionRequestType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AccessSessionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AccessSessionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AccessSessionRequestType * SOAP_FMAC4 soap_get_ns3__AccessSessionRequestType(struct soap *soap, ns3__AccessSessionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AccessSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AccessSessionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AccessSessionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AccessSessionRequestType * SOAP_FMAC4 soap_in_ns3__AccessSessionRequestType(struct soap *soap, const char *tag, ns3__AccessSessionRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AccessSessionRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AccessSessionRequestType, sizeof(ns3__AccessSessionRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AccessSessionRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AccessSessionRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__AccessSessionRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__AccessSessionRequestType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AccessSessionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AccessSessionRequestType, 0, sizeof(ns3__AccessSessionRequestType), 0, soap_copy_ns3__AccessSessionRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AccessSessionRequestType * SOAP_FMAC4 soap_instantiate_ns3__AccessSessionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AccessSessionRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AccessSessionRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__AccessSessionRequestType);
		if (size)
			*size = sizeof(ns3__AccessSessionRequestType);
		((ns3__AccessSessionRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__AccessSessionRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AccessSessionRequestType);
		for (int i = 0; i < n; i++)
			((ns3__AccessSessionRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AccessSessionRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AccessSessionRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AccessSessionRequestType %p -> %p\n", q, p));
	*(ns3__AccessSessionRequestType*)p = *(ns3__AccessSessionRequestType*)q;
}

void ns3__InvalidSessionErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__InvalidSessionErrorType::sessionId);
	/* transient soap skipped */
}

void ns3__InvalidSessionErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__InvalidSessionErrorType::sessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__InvalidSessionErrorType::sessionId);
	/* transient soap skipped */
}

int ns3__InvalidSessionErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__InvalidSessionErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__InvalidSessionErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__InvalidSessionErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__InvalidSessionErrorType(struct soap *soap, const char *tag, int id, const ns3__InvalidSessionErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__InvalidSessionErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:sessionId", -1, &(a->ns3__InvalidSessionErrorType::sessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__InvalidSessionErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__InvalidSessionErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__InvalidSessionErrorType * SOAP_FMAC4 soap_get_ns3__InvalidSessionErrorType(struct soap *soap, ns3__InvalidSessionErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__InvalidSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__InvalidSessionErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__InvalidSessionErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__InvalidSessionErrorType * SOAP_FMAC4 soap_in_ns3__InvalidSessionErrorType(struct soap *soap, const char *tag, ns3__InvalidSessionErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__InvalidSessionErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__InvalidSessionErrorType, sizeof(ns3__InvalidSessionErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__InvalidSessionErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__InvalidSessionErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:sessionId", &(a->ns3__InvalidSessionErrorType::sessionId), "xsd:string"))
				{	soap_flag_sessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__InvalidSessionErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__InvalidSessionErrorType, 0, sizeof(ns3__InvalidSessionErrorType), 0, soap_copy_ns3__InvalidSessionErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__InvalidSessionErrorType * SOAP_FMAC4 soap_instantiate_ns3__InvalidSessionErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__InvalidSessionErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__InvalidSessionErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__InvalidSessionErrorType);
		if (size)
			*size = sizeof(ns3__InvalidSessionErrorType);
		((ns3__InvalidSessionErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__InvalidSessionErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__InvalidSessionErrorType);
		for (int i = 0; i < n; i++)
			((ns3__InvalidSessionErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__InvalidSessionErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__InvalidSessionErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__InvalidSessionErrorType %p -> %p\n", q, p));
	*(ns3__InvalidSessionErrorType*)p = *(ns3__InvalidSessionErrorType*)q;
}

void ns3__NoSuchUserErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__NoSuchUserErrorType::securityDomain);
	soap_default_std__string(soap, &this->ns3__NoSuchUserErrorType::username);
	/* transient soap skipped */
}

void ns3__NoSuchUserErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__NoSuchUserErrorType::securityDomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__NoSuchUserErrorType::securityDomain);
	soap_embedded(soap, &this->ns3__NoSuchUserErrorType::username, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__NoSuchUserErrorType::username);
	/* transient soap skipped */
}

int ns3__NoSuchUserErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__NoSuchUserErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__NoSuchUserErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__NoSuchUserErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__NoSuchUserErrorType(struct soap *soap, const char *tag, int id, const ns3__NoSuchUserErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__NoSuchUserErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securityDomain", -1, &(a->ns3__NoSuchUserErrorType::securityDomain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:username", -1, &(a->ns3__NoSuchUserErrorType::username), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__NoSuchUserErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__NoSuchUserErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__NoSuchUserErrorType * SOAP_FMAC4 soap_get_ns3__NoSuchUserErrorType(struct soap *soap, ns3__NoSuchUserErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__NoSuchUserErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__NoSuchUserErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__NoSuchUserErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__NoSuchUserErrorType * SOAP_FMAC4 soap_in_ns3__NoSuchUserErrorType(struct soap *soap, const char *tag, ns3__NoSuchUserErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__NoSuchUserErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__NoSuchUserErrorType, sizeof(ns3__NoSuchUserErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__NoSuchUserErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__NoSuchUserErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_securityDomain1 = 1;
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_securityDomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securityDomain", &(a->ns3__NoSuchUserErrorType::securityDomain), "xsd:string"))
				{	soap_flag_securityDomain1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:username", &(a->ns3__NoSuchUserErrorType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__NoSuchUserErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__NoSuchUserErrorType, 0, sizeof(ns3__NoSuchUserErrorType), 0, soap_copy_ns3__NoSuchUserErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_securityDomain1 > 0 || soap_flag_username1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__NoSuchUserErrorType * SOAP_FMAC4 soap_instantiate_ns3__NoSuchUserErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__NoSuchUserErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__NoSuchUserErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__NoSuchUserErrorType);
		if (size)
			*size = sizeof(ns3__NoSuchUserErrorType);
		((ns3__NoSuchUserErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__NoSuchUserErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__NoSuchUserErrorType);
		for (int i = 0; i < n; i++)
			((ns3__NoSuchUserErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__NoSuchUserErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__NoSuchUserErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__NoSuchUserErrorType %p -> %p\n", q, p));
	*(ns3__NoSuchUserErrorType*)p = *(ns3__NoSuchUserErrorType*)q;
}

void ns3__SSOIdentityManagerErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSOIdentityManagerErrorType::errMessage);
	/* transient soap skipped */
}

void ns3__SSOIdentityManagerErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__SSOIdentityManagerErrorType::errMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOIdentityManagerErrorType::errMessage);
	/* transient soap skipped */
}

int ns3__SSOIdentityManagerErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSOIdentityManagerErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSOIdentityManagerErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSOIdentityManagerErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSOIdentityManagerErrorType(struct soap *soap, const char *tag, int id, const ns3__SSOIdentityManagerErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSOIdentityManagerErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:errMessage", -1, &(a->ns3__SSOIdentityManagerErrorType::errMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSOIdentityManagerErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSOIdentityManagerErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSOIdentityManagerErrorType * SOAP_FMAC4 soap_get_ns3__SSOIdentityManagerErrorType(struct soap *soap, ns3__SSOIdentityManagerErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSOIdentityManagerErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSOIdentityManagerErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSOIdentityManagerErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSOIdentityManagerErrorType * SOAP_FMAC4 soap_in_ns3__SSOIdentityManagerErrorType(struct soap *soap, const char *tag, ns3__SSOIdentityManagerErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSOIdentityManagerErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSOIdentityManagerErrorType, sizeof(ns3__SSOIdentityManagerErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSOIdentityManagerErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSOIdentityManagerErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:errMessage", &(a->ns3__SSOIdentityManagerErrorType::errMessage), "xsd:string"))
				{	soap_flag_errMessage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSOIdentityManagerErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSOIdentityManagerErrorType, 0, sizeof(ns3__SSOIdentityManagerErrorType), 0, soap_copy_ns3__SSOIdentityManagerErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errMessage1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSOIdentityManagerErrorType * SOAP_FMAC4 soap_instantiate_ns3__SSOIdentityManagerErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSOIdentityManagerErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSOIdentityManagerErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSOIdentityManagerErrorType);
		if (size)
			*size = sizeof(ns3__SSOIdentityManagerErrorType);
		((ns3__SSOIdentityManagerErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSOIdentityManagerErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSOIdentityManagerErrorType);
		for (int i = 0; i < n; i++)
			((ns3__SSOIdentityManagerErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSOIdentityManagerErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSOIdentityManagerErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSOIdentityManagerErrorType %p -> %p\n", q, p));
	*(ns3__SSOIdentityManagerErrorType*)p = *(ns3__SSOIdentityManagerErrorType*)q;
}

void ns3__UserExistsResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns3__UserExistsResponseType::userexists);
	/* transient soap skipped */
}

void ns3__UserExistsResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns3__UserExistsResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__UserExistsResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__UserExistsResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__UserExistsResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserExistsResponseType(struct soap *soap, const char *tag, int id, const ns3__UserExistsResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__UserExistsResponseType), type))
		return soap->error;
	soap_element_result(soap, "ns3:userexists");
	if (soap_out_bool(soap, "ns3:userexists", -1, &(a->ns3__UserExistsResponseType::userexists), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__UserExistsResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__UserExistsResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__UserExistsResponseType * SOAP_FMAC4 soap_get_ns3__UserExistsResponseType(struct soap *soap, ns3__UserExistsResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__UserExistsResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__UserExistsResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__UserExistsResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__UserExistsResponseType * SOAP_FMAC4 soap_in_ns3__UserExistsResponseType(struct soap *soap, const char *tag, ns3__UserExistsResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__UserExistsResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__UserExistsResponseType, sizeof(ns3__UserExistsResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__UserExistsResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__UserExistsResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userexists1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userexists1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns3:userexists", &(a->ns3__UserExistsResponseType::userexists), "xsd:boolean"))
				{	soap_flag_userexists1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:userexists");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__UserExistsResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__UserExistsResponseType, 0, sizeof(ns3__UserExistsResponseType), 0, soap_copy_ns3__UserExistsResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_userexists1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__UserExistsResponseType * SOAP_FMAC4 soap_instantiate_ns3__UserExistsResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__UserExistsResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__UserExistsResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__UserExistsResponseType);
		if (size)
			*size = sizeof(ns3__UserExistsResponseType);
		((ns3__UserExistsResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__UserExistsResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__UserExistsResponseType);
		for (int i = 0; i < n; i++)
			((ns3__UserExistsResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__UserExistsResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UserExistsResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__UserExistsResponseType %p -> %p\n", q, p));
	*(ns3__UserExistsResponseType*)p = *(ns3__UserExistsResponseType*)q;
}

void ns3__UserExistsRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__UserExistsRequestType::requester);
	soap_default_std__string(soap, &this->ns3__UserExistsRequestType::securityDomain);
	soap_default_std__string(soap, &this->ns3__UserExistsRequestType::username);
	/* transient soap skipped */
}

void ns3__UserExistsRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__UserExistsRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__UserExistsRequestType::requester);
	soap_embedded(soap, &this->ns3__UserExistsRequestType::securityDomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__UserExistsRequestType::securityDomain);
	soap_embedded(soap, &this->ns3__UserExistsRequestType::username, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__UserExistsRequestType::username);
	/* transient soap skipped */
}

int ns3__UserExistsRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__UserExistsRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__UserExistsRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__UserExistsRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__UserExistsRequestType(struct soap *soap, const char *tag, int id, const ns3__UserExistsRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__UserExistsRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__UserExistsRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securityDomain", -1, &(a->ns3__UserExistsRequestType::securityDomain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:username", -1, &(a->ns3__UserExistsRequestType::username), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__UserExistsRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__UserExistsRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__UserExistsRequestType * SOAP_FMAC4 soap_get_ns3__UserExistsRequestType(struct soap *soap, ns3__UserExistsRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__UserExistsRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__UserExistsRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__UserExistsRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__UserExistsRequestType * SOAP_FMAC4 soap_in_ns3__UserExistsRequestType(struct soap *soap, const char *tag, ns3__UserExistsRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__UserExistsRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__UserExistsRequestType, sizeof(ns3__UserExistsRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__UserExistsRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__UserExistsRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_securityDomain1 = 1;
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__UserExistsRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_securityDomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securityDomain", &(a->ns3__UserExistsRequestType::securityDomain), "xsd:string"))
				{	soap_flag_securityDomain1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:username", &(a->ns3__UserExistsRequestType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__UserExistsRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__UserExistsRequestType, 0, sizeof(ns3__UserExistsRequestType), 0, soap_copy_ns3__UserExistsRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_securityDomain1 > 0 || soap_flag_username1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__UserExistsRequestType * SOAP_FMAC4 soap_instantiate_ns3__UserExistsRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__UserExistsRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__UserExistsRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__UserExistsRequestType);
		if (size)
			*size = sizeof(ns3__UserExistsRequestType);
		((ns3__UserExistsRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__UserExistsRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__UserExistsRequestType);
		for (int i = 0; i < n; i++)
			((ns3__UserExistsRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__UserExistsRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__UserExistsRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__UserExistsRequestType %p -> %p\n", q, p));
	*(ns3__UserExistsRequestType*)p = *(ns3__UserExistsRequestType*)q;
}

void ns3__FindRolesBySSOSessionIdResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__FindRolesBySSOSessionIdResponseType::username = NULL;
	soap_default_std__vectorTemplateOfPointerTons3__SSORoleType(soap, &this->ns3__FindRolesBySSOSessionIdResponseType::roles);
	/* transient soap skipped */
}

void ns3__FindRolesBySSOSessionIdResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns3__FindRolesBySSOSessionIdResponseType::username);
	soap_serialize_std__vectorTemplateOfPointerTons3__SSORoleType(soap, &this->ns3__FindRolesBySSOSessionIdResponseType::roles);
	/* transient soap skipped */
}

int ns3__FindRolesBySSOSessionIdResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindRolesBySSOSessionIdResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindRolesBySSOSessionIdResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindRolesBySSOSessionIdResponseType(struct soap *soap, const char *tag, int id, const ns3__FindRolesBySSOSessionIdResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType), type))
		return soap->error;
	if (a->username)
		soap_element_result(soap, "ns3:username");
	if (soap_out_PointerTostd__string(soap, "ns3:username", -1, &(a->ns3__FindRolesBySSOSessionIdResponseType::username), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__SSORoleType(soap, "ns3:roles", -1, &(a->ns3__FindRolesBySSOSessionIdResponseType::roles), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindRolesBySSOSessionIdResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindRolesBySSOSessionIdResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdResponseType * SOAP_FMAC4 soap_get_ns3__FindRolesBySSOSessionIdResponseType(struct soap *soap, ns3__FindRolesBySSOSessionIdResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindRolesBySSOSessionIdResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindRolesBySSOSessionIdResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindRolesBySSOSessionIdResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdResponseType * SOAP_FMAC4 soap_in_ns3__FindRolesBySSOSessionIdResponseType(struct soap *soap, const char *tag, ns3__FindRolesBySSOSessionIdResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindRolesBySSOSessionIdResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType, sizeof(ns3__FindRolesBySSOSessionIdResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindRolesBySSOSessionIdResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns3:username", &(a->ns3__FindRolesBySSOSessionIdResponseType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons3__SSORoleType(soap, "ns3:roles", &(a->ns3__FindRolesBySSOSessionIdResponseType::roles), "ns3:SSORoleType"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns3:username");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindRolesBySSOSessionIdResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType, 0, sizeof(ns3__FindRolesBySSOSessionIdResponseType), 0, soap_copy_ns3__FindRolesBySSOSessionIdResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdResponseType * SOAP_FMAC4 soap_instantiate_ns3__FindRolesBySSOSessionIdResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindRolesBySSOSessionIdResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindRolesBySSOSessionIdResponseType);
		if (size)
			*size = sizeof(ns3__FindRolesBySSOSessionIdResponseType);
		((ns3__FindRolesBySSOSessionIdResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindRolesBySSOSessionIdResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindRolesBySSOSessionIdResponseType);
		for (int i = 0; i < n; i++)
			((ns3__FindRolesBySSOSessionIdResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindRolesBySSOSessionIdResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindRolesBySSOSessionIdResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindRolesBySSOSessionIdResponseType %p -> %p\n", q, p));
	*(ns3__FindRolesBySSOSessionIdResponseType*)p = *(ns3__FindRolesBySSOSessionIdResponseType*)q;
}

void ns3__FindRolesBySSOSessionIdRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::requester);
	soap_default_std__string(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__FindRolesBySSOSessionIdRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::requester);
	soap_embedded(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindRolesBySSOSessionIdRequestType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__FindRolesBySSOSessionIdRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindRolesBySSOSessionIdRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindRolesBySSOSessionIdRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindRolesBySSOSessionIdRequestType(struct soap *soap, const char *tag, int id, const ns3__FindRolesBySSOSessionIdRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__FindRolesBySSOSessionIdRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__FindRolesBySSOSessionIdRequestType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindRolesBySSOSessionIdRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindRolesBySSOSessionIdRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdRequestType * SOAP_FMAC4 soap_get_ns3__FindRolesBySSOSessionIdRequestType(struct soap *soap, ns3__FindRolesBySSOSessionIdRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindRolesBySSOSessionIdRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindRolesBySSOSessionIdRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindRolesBySSOSessionIdRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdRequestType * SOAP_FMAC4 soap_in_ns3__FindRolesBySSOSessionIdRequestType(struct soap *soap, const char *tag, ns3__FindRolesBySSOSessionIdRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindRolesBySSOSessionIdRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType, sizeof(ns3__FindRolesBySSOSessionIdRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindRolesBySSOSessionIdRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__FindRolesBySSOSessionIdRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__FindRolesBySSOSessionIdRequestType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindRolesBySSOSessionIdRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType, 0, sizeof(ns3__FindRolesBySSOSessionIdRequestType), 0, soap_copy_ns3__FindRolesBySSOSessionIdRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdRequestType * SOAP_FMAC4 soap_instantiate_ns3__FindRolesBySSOSessionIdRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindRolesBySSOSessionIdRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindRolesBySSOSessionIdRequestType);
		if (size)
			*size = sizeof(ns3__FindRolesBySSOSessionIdRequestType);
		((ns3__FindRolesBySSOSessionIdRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindRolesBySSOSessionIdRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindRolesBySSOSessionIdRequestType);
		for (int i = 0; i < n; i++)
			((ns3__FindRolesBySSOSessionIdRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindRolesBySSOSessionIdRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindRolesBySSOSessionIdRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindRolesBySSOSessionIdRequestType %p -> %p\n", q, p));
	*(ns3__FindRolesBySSOSessionIdRequestType*)p = *(ns3__FindRolesBySSOSessionIdRequestType*)q;
}

void ns3__FindUserInSecurityDomainResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__FindUserInSecurityDomainResponseType::ns3__SSOUser = NULL;
	/* transient soap skipped */
}

void ns3__FindUserInSecurityDomainResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__SSOUserType(soap, &this->ns3__FindUserInSecurityDomainResponseType::ns3__SSOUser);
	/* transient soap skipped */
}

int ns3__FindUserInSecurityDomainResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindUserInSecurityDomainResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindUserInSecurityDomainResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindUserInSecurityDomainResponseType(struct soap *soap, const char *tag, int id, const ns3__FindUserInSecurityDomainResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType), type))
		return soap->error;
	if (a->ns3__SSOUser)
		soap_element_result(soap, "ns3:SSOUser");
	if (soap_out_PointerTons3__SSOUserType(soap, "ns3:SSOUser", -1, &(a->ns3__FindUserInSecurityDomainResponseType::ns3__SSOUser), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindUserInSecurityDomainResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindUserInSecurityDomainResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainResponseType * SOAP_FMAC4 soap_get_ns3__FindUserInSecurityDomainResponseType(struct soap *soap, ns3__FindUserInSecurityDomainResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindUserInSecurityDomainResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindUserInSecurityDomainResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindUserInSecurityDomainResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainResponseType * SOAP_FMAC4 soap_in_ns3__FindUserInSecurityDomainResponseType(struct soap *soap, const char *tag, ns3__FindUserInSecurityDomainResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindUserInSecurityDomainResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType, sizeof(ns3__FindUserInSecurityDomainResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindUserInSecurityDomainResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ns3__SSOUser1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__SSOUser1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOUserType(soap, "ns3:SSOUser", &(a->ns3__FindUserInSecurityDomainResponseType::ns3__SSOUser), "ns3:SSOUserType"))
				{	soap_flag_ns3__SSOUser1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:SSOUser");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindUserInSecurityDomainResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType, 0, sizeof(ns3__FindUserInSecurityDomainResponseType), 0, soap_copy_ns3__FindUserInSecurityDomainResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns3__SSOUser1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainResponseType * SOAP_FMAC4 soap_instantiate_ns3__FindUserInSecurityDomainResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindUserInSecurityDomainResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindUserInSecurityDomainResponseType);
		if (size)
			*size = sizeof(ns3__FindUserInSecurityDomainResponseType);
		((ns3__FindUserInSecurityDomainResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindUserInSecurityDomainResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindUserInSecurityDomainResponseType);
		for (int i = 0; i < n; i++)
			((ns3__FindUserInSecurityDomainResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindUserInSecurityDomainResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindUserInSecurityDomainResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindUserInSecurityDomainResponseType %p -> %p\n", q, p));
	*(ns3__FindUserInSecurityDomainResponseType*)p = *(ns3__FindUserInSecurityDomainResponseType*)q;
}

void ns3__FindUserInSecurityDomainRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::requester);
	soap_default_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::securityDomain);
	soap_default_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::username);
	/* transient soap skipped */
}

void ns3__FindUserInSecurityDomainRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__FindUserInSecurityDomainRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::requester);
	soap_embedded(soap, &this->ns3__FindUserInSecurityDomainRequestType::securityDomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::securityDomain);
	soap_embedded(soap, &this->ns3__FindUserInSecurityDomainRequestType::username, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindUserInSecurityDomainRequestType::username);
	/* transient soap skipped */
}

int ns3__FindUserInSecurityDomainRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindUserInSecurityDomainRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindUserInSecurityDomainRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindUserInSecurityDomainRequestType(struct soap *soap, const char *tag, int id, const ns3__FindUserInSecurityDomainRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__FindUserInSecurityDomainRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securityDomain", -1, &(a->ns3__FindUserInSecurityDomainRequestType::securityDomain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:username", -1, &(a->ns3__FindUserInSecurityDomainRequestType::username), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindUserInSecurityDomainRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindUserInSecurityDomainRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainRequestType * SOAP_FMAC4 soap_get_ns3__FindUserInSecurityDomainRequestType(struct soap *soap, ns3__FindUserInSecurityDomainRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindUserInSecurityDomainRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindUserInSecurityDomainRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindUserInSecurityDomainRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainRequestType * SOAP_FMAC4 soap_in_ns3__FindUserInSecurityDomainRequestType(struct soap *soap, const char *tag, ns3__FindUserInSecurityDomainRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindUserInSecurityDomainRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType, sizeof(ns3__FindUserInSecurityDomainRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindUserInSecurityDomainRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_securityDomain1 = 1;
	size_t soap_flag_username1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__FindUserInSecurityDomainRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_securityDomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securityDomain", &(a->ns3__FindUserInSecurityDomainRequestType::securityDomain), "xsd:string"))
				{	soap_flag_securityDomain1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:username", &(a->ns3__FindUserInSecurityDomainRequestType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindUserInSecurityDomainRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType, 0, sizeof(ns3__FindUserInSecurityDomainRequestType), 0, soap_copy_ns3__FindUserInSecurityDomainRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_securityDomain1 > 0 || soap_flag_username1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainRequestType * SOAP_FMAC4 soap_instantiate_ns3__FindUserInSecurityDomainRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindUserInSecurityDomainRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindUserInSecurityDomainRequestType);
		if (size)
			*size = sizeof(ns3__FindUserInSecurityDomainRequestType);
		((ns3__FindUserInSecurityDomainRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindUserInSecurityDomainRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindUserInSecurityDomainRequestType);
		for (int i = 0; i < n; i++)
			((ns3__FindUserInSecurityDomainRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindUserInSecurityDomainRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindUserInSecurityDomainRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindUserInSecurityDomainRequestType %p -> %p\n", q, p));
	*(ns3__FindUserInSecurityDomainRequestType*)p = *(ns3__FindUserInSecurityDomainRequestType*)q;
}

void ns3__FindUserInSessionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__FindUserInSessionResponseType::ns3__SSOUser = NULL;
	/* transient soap skipped */
}

void ns3__FindUserInSessionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__SSOUserType(soap, &this->ns3__FindUserInSessionResponseType::ns3__SSOUser);
	/* transient soap skipped */
}

int ns3__FindUserInSessionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindUserInSessionResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindUserInSessionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindUserInSessionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindUserInSessionResponseType(struct soap *soap, const char *tag, int id, const ns3__FindUserInSessionResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindUserInSessionResponseType), type))
		return soap->error;
	if (a->ns3__SSOUser)
		soap_element_result(soap, "ns3:SSOUser");
	if (soap_out_PointerTons3__SSOUserType(soap, "ns3:SSOUser", -1, &(a->ns3__FindUserInSessionResponseType::ns3__SSOUser), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindUserInSessionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindUserInSessionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindUserInSessionResponseType * SOAP_FMAC4 soap_get_ns3__FindUserInSessionResponseType(struct soap *soap, ns3__FindUserInSessionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindUserInSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindUserInSessionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindUserInSessionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindUserInSessionResponseType * SOAP_FMAC4 soap_in_ns3__FindUserInSessionResponseType(struct soap *soap, const char *tag, ns3__FindUserInSessionResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindUserInSessionResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindUserInSessionResponseType, sizeof(ns3__FindUserInSessionResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindUserInSessionResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindUserInSessionResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ns3__SSOUser1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__SSOUser1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOUserType(soap, "ns3:SSOUser", &(a->ns3__FindUserInSessionResponseType::ns3__SSOUser), "ns3:SSOUserType"))
				{	soap_flag_ns3__SSOUser1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:SSOUser");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindUserInSessionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindUserInSessionResponseType, 0, sizeof(ns3__FindUserInSessionResponseType), 0, soap_copy_ns3__FindUserInSessionResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns3__SSOUser1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindUserInSessionResponseType * SOAP_FMAC4 soap_instantiate_ns3__FindUserInSessionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindUserInSessionResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindUserInSessionResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindUserInSessionResponseType);
		if (size)
			*size = sizeof(ns3__FindUserInSessionResponseType);
		((ns3__FindUserInSessionResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindUserInSessionResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindUserInSessionResponseType);
		for (int i = 0; i < n; i++)
			((ns3__FindUserInSessionResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindUserInSessionResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindUserInSessionResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindUserInSessionResponseType %p -> %p\n", q, p));
	*(ns3__FindUserInSessionResponseType*)p = *(ns3__FindUserInSessionResponseType*)q;
}

void ns3__FindUserInSessionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__FindUserInSessionRequestType::requester);
	soap_default_std__string(soap, &this->ns3__FindUserInSessionRequestType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__FindUserInSessionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__FindUserInSessionRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindUserInSessionRequestType::requester);
	soap_embedded(soap, &this->ns3__FindUserInSessionRequestType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__FindUserInSessionRequestType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__FindUserInSessionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__FindUserInSessionRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__FindUserInSessionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__FindUserInSessionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FindUserInSessionRequestType(struct soap *soap, const char *tag, int id, const ns3__FindUserInSessionRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__FindUserInSessionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__FindUserInSessionRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__FindUserInSessionRequestType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__FindUserInSessionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__FindUserInSessionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__FindUserInSessionRequestType * SOAP_FMAC4 soap_get_ns3__FindUserInSessionRequestType(struct soap *soap, ns3__FindUserInSessionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__FindUserInSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__FindUserInSessionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__FindUserInSessionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__FindUserInSessionRequestType * SOAP_FMAC4 soap_in_ns3__FindUserInSessionRequestType(struct soap *soap, const char *tag, ns3__FindUserInSessionRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__FindUserInSessionRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__FindUserInSessionRequestType, sizeof(ns3__FindUserInSessionRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__FindUserInSessionRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__FindUserInSessionRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__FindUserInSessionRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__FindUserInSessionRequestType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__FindUserInSessionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__FindUserInSessionRequestType, 0, sizeof(ns3__FindUserInSessionRequestType), 0, soap_copy_ns3__FindUserInSessionRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__FindUserInSessionRequestType * SOAP_FMAC4 soap_instantiate_ns3__FindUserInSessionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__FindUserInSessionRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__FindUserInSessionRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__FindUserInSessionRequestType);
		if (size)
			*size = sizeof(ns3__FindUserInSessionRequestType);
		((ns3__FindUserInSessionRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__FindUserInSessionRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__FindUserInSessionRequestType);
		for (int i = 0; i < n; i++)
			((ns3__FindUserInSessionRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__FindUserInSessionRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__FindUserInSessionRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__FindUserInSessionRequestType %p -> %p\n", q, p));
	*(ns3__FindUserInSessionRequestType*)p = *(ns3__FindUserInSessionRequestType*)q;
}

void ns3__AssertionNotValidErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__AssertionNotValidErrorType::assertionId);
	/* transient soap skipped */
}

void ns3__AssertionNotValidErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__AssertionNotValidErrorType::assertionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertionNotValidErrorType::assertionId);
	/* transient soap skipped */
}

int ns3__AssertionNotValidErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AssertionNotValidErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AssertionNotValidErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AssertionNotValidErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AssertionNotValidErrorType(struct soap *soap, const char *tag, int id, const ns3__AssertionNotValidErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AssertionNotValidErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:assertionId", -1, &(a->ns3__AssertionNotValidErrorType::assertionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AssertionNotValidErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AssertionNotValidErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AssertionNotValidErrorType * SOAP_FMAC4 soap_get_ns3__AssertionNotValidErrorType(struct soap *soap, ns3__AssertionNotValidErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AssertionNotValidErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AssertionNotValidErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AssertionNotValidErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AssertionNotValidErrorType * SOAP_FMAC4 soap_in_ns3__AssertionNotValidErrorType(struct soap *soap, const char *tag, ns3__AssertionNotValidErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AssertionNotValidErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AssertionNotValidErrorType, sizeof(ns3__AssertionNotValidErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AssertionNotValidErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AssertionNotValidErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_assertionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_assertionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:assertionId", &(a->ns3__AssertionNotValidErrorType::assertionId), "xsd:string"))
				{	soap_flag_assertionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AssertionNotValidErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AssertionNotValidErrorType, 0, sizeof(ns3__AssertionNotValidErrorType), 0, soap_copy_ns3__AssertionNotValidErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_assertionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AssertionNotValidErrorType * SOAP_FMAC4 soap_instantiate_ns3__AssertionNotValidErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AssertionNotValidErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AssertionNotValidErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__AssertionNotValidErrorType);
		if (size)
			*size = sizeof(ns3__AssertionNotValidErrorType);
		((ns3__AssertionNotValidErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__AssertionNotValidErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AssertionNotValidErrorType);
		for (int i = 0; i < n; i++)
			((ns3__AssertionNotValidErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AssertionNotValidErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AssertionNotValidErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AssertionNotValidErrorType %p -> %p\n", q, p));
	*(ns3__AssertionNotValidErrorType*)p = *(ns3__AssertionNotValidErrorType*)q;
}

void ns3__SSOIdentityProviderErrorType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__SSOIdentityProviderErrorType::errMessage);
	/* transient soap skipped */
}

void ns3__SSOIdentityProviderErrorType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__SSOIdentityProviderErrorType::errMessage, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__SSOIdentityProviderErrorType::errMessage);
	/* transient soap skipped */
}

int ns3__SSOIdentityProviderErrorType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__SSOIdentityProviderErrorType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__SSOIdentityProviderErrorType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__SSOIdentityProviderErrorType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SSOIdentityProviderErrorType(struct soap *soap, const char *tag, int id, const ns3__SSOIdentityProviderErrorType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__SSOIdentityProviderErrorType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:errMessage", -1, &(a->ns3__SSOIdentityProviderErrorType::errMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__SSOIdentityProviderErrorType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__SSOIdentityProviderErrorType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__SSOIdentityProviderErrorType * SOAP_FMAC4 soap_get_ns3__SSOIdentityProviderErrorType(struct soap *soap, ns3__SSOIdentityProviderErrorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__SSOIdentityProviderErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__SSOIdentityProviderErrorType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__SSOIdentityProviderErrorType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__SSOIdentityProviderErrorType * SOAP_FMAC4 soap_in_ns3__SSOIdentityProviderErrorType(struct soap *soap, const char *tag, ns3__SSOIdentityProviderErrorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__SSOIdentityProviderErrorType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__SSOIdentityProviderErrorType, sizeof(ns3__SSOIdentityProviderErrorType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__SSOIdentityProviderErrorType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__SSOIdentityProviderErrorType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_errMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:errMessage", &(a->ns3__SSOIdentityProviderErrorType::errMessage), "xsd:string"))
				{	soap_flag_errMessage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__SSOIdentityProviderErrorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__SSOIdentityProviderErrorType, 0, sizeof(ns3__SSOIdentityProviderErrorType), 0, soap_copy_ns3__SSOIdentityProviderErrorType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errMessage1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__SSOIdentityProviderErrorType * SOAP_FMAC4 soap_instantiate_ns3__SSOIdentityProviderErrorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__SSOIdentityProviderErrorType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__SSOIdentityProviderErrorType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__SSOIdentityProviderErrorType);
		if (size)
			*size = sizeof(ns3__SSOIdentityProviderErrorType);
		((ns3__SSOIdentityProviderErrorType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__SSOIdentityProviderErrorType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__SSOIdentityProviderErrorType);
		for (int i = 0; i < n; i++)
			((ns3__SSOIdentityProviderErrorType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__SSOIdentityProviderErrorType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SSOIdentityProviderErrorType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__SSOIdentityProviderErrorType %p -> %p\n", q, p));
	*(ns3__SSOIdentityProviderErrorType*)p = *(ns3__SSOIdentityProviderErrorType*)q;
}

void ns3__GlobalSignoffResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__GlobalSignoffResponseType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__GlobalSignoffResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__GlobalSignoffResponseType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__GlobalSignoffResponseType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__GlobalSignoffResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__GlobalSignoffResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__GlobalSignoffResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__GlobalSignoffResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GlobalSignoffResponseType(struct soap *soap, const char *tag, int id, const ns3__GlobalSignoffResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__GlobalSignoffResponseType), type))
		return soap->error;
	soap_element_result(soap, "ns3:ssoSessionId");
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__GlobalSignoffResponseType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__GlobalSignoffResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__GlobalSignoffResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__GlobalSignoffResponseType * SOAP_FMAC4 soap_get_ns3__GlobalSignoffResponseType(struct soap *soap, ns3__GlobalSignoffResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__GlobalSignoffResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__GlobalSignoffResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__GlobalSignoffResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__GlobalSignoffResponseType * SOAP_FMAC4 soap_in_ns3__GlobalSignoffResponseType(struct soap *soap, const char *tag, ns3__GlobalSignoffResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__GlobalSignoffResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__GlobalSignoffResponseType, sizeof(ns3__GlobalSignoffResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__GlobalSignoffResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__GlobalSignoffResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__GlobalSignoffResponseType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:ssoSessionId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__GlobalSignoffResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__GlobalSignoffResponseType, 0, sizeof(ns3__GlobalSignoffResponseType), 0, soap_copy_ns3__GlobalSignoffResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__GlobalSignoffResponseType * SOAP_FMAC4 soap_instantiate_ns3__GlobalSignoffResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__GlobalSignoffResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__GlobalSignoffResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__GlobalSignoffResponseType);
		if (size)
			*size = sizeof(ns3__GlobalSignoffResponseType);
		((ns3__GlobalSignoffResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__GlobalSignoffResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__GlobalSignoffResponseType);
		for (int i = 0; i < n; i++)
			((ns3__GlobalSignoffResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__GlobalSignoffResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__GlobalSignoffResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__GlobalSignoffResponseType %p -> %p\n", q, p));
	*(ns3__GlobalSignoffResponseType*)p = *(ns3__GlobalSignoffResponseType*)q;
}

void ns3__GlobalSignoffRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__GlobalSignoffRequestType::requester);
	soap_default_std__string(soap, &this->ns3__GlobalSignoffRequestType::ssoSessionId);
	/* transient soap skipped */
}

void ns3__GlobalSignoffRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__GlobalSignoffRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__GlobalSignoffRequestType::requester);
	soap_embedded(soap, &this->ns3__GlobalSignoffRequestType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__GlobalSignoffRequestType::ssoSessionId);
	/* transient soap skipped */
}

int ns3__GlobalSignoffRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__GlobalSignoffRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__GlobalSignoffRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__GlobalSignoffRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__GlobalSignoffRequestType(struct soap *soap, const char *tag, int id, const ns3__GlobalSignoffRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__GlobalSignoffRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__GlobalSignoffRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__GlobalSignoffRequestType::ssoSessionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__GlobalSignoffRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__GlobalSignoffRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__GlobalSignoffRequestType * SOAP_FMAC4 soap_get_ns3__GlobalSignoffRequestType(struct soap *soap, ns3__GlobalSignoffRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__GlobalSignoffRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__GlobalSignoffRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__GlobalSignoffRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__GlobalSignoffRequestType * SOAP_FMAC4 soap_in_ns3__GlobalSignoffRequestType(struct soap *soap, const char *tag, ns3__GlobalSignoffRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__GlobalSignoffRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__GlobalSignoffRequestType, sizeof(ns3__GlobalSignoffRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__GlobalSignoffRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__GlobalSignoffRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_ssoSessionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__GlobalSignoffRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__GlobalSignoffRequestType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__GlobalSignoffRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__GlobalSignoffRequestType, 0, sizeof(ns3__GlobalSignoffRequestType), 0, soap_copy_ns3__GlobalSignoffRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_ssoSessionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__GlobalSignoffRequestType * SOAP_FMAC4 soap_instantiate_ns3__GlobalSignoffRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__GlobalSignoffRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__GlobalSignoffRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__GlobalSignoffRequestType);
		if (size)
			*size = sizeof(ns3__GlobalSignoffRequestType);
		((ns3__GlobalSignoffRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__GlobalSignoffRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__GlobalSignoffRequestType);
		for (int i = 0; i < n; i++)
			((ns3__GlobalSignoffRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__GlobalSignoffRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__GlobalSignoffRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__GlobalSignoffRequestType %p -> %p\n", q, p));
	*(ns3__GlobalSignoffRequestType*)p = *(ns3__GlobalSignoffRequestType*)q;
}

void ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationResponseType::assertionId);
	/* transient soap skipped */
}

void ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationResponseType::assertionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationResponseType::assertionId);
	/* transient soap skipped */
}

int ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, const char *tag, int id, const ns3__AssertIdentityWithSimpleAuthenticationResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType), type))
		return soap->error;
	soap_element_result(soap, "ns3:assertionId");
	if (soap_out_std__string(soap, "ns3:assertionId", -1, &(a->ns3__AssertIdentityWithSimpleAuthenticationResponseType::assertionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationResponseType * SOAP_FMAC4 soap_get_ns3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AssertIdentityWithSimpleAuthenticationResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationResponseType * SOAP_FMAC4 soap_in_ns3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, const char *tag, ns3__AssertIdentityWithSimpleAuthenticationResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AssertIdentityWithSimpleAuthenticationResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType, sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AssertIdentityWithSimpleAuthenticationResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_assertionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_assertionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:assertionId", &(a->ns3__AssertIdentityWithSimpleAuthenticationResponseType::assertionId), "xsd:string"))
				{	soap_flag_assertionId1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:assertionId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AssertIdentityWithSimpleAuthenticationResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType, 0, sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType), 0, soap_copy_ns3__AssertIdentityWithSimpleAuthenticationResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_assertionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationResponseType * SOAP_FMAC4 soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__AssertIdentityWithSimpleAuthenticationResponseType);
		if (size)
			*size = sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType);
		((ns3__AssertIdentityWithSimpleAuthenticationResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__AssertIdentityWithSimpleAuthenticationResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType);
		for (int i = 0; i < n; i++)
			((ns3__AssertIdentityWithSimpleAuthenticationResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AssertIdentityWithSimpleAuthenticationResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AssertIdentityWithSimpleAuthenticationResponseType %p -> %p\n", q, p));
	*(ns3__AssertIdentityWithSimpleAuthenticationResponseType*)p = *(ns3__AssertIdentityWithSimpleAuthenticationResponseType*)q;
}

void ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::requester);
	soap_default_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::securityDomain);
	soap_default_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::username);
	soap_default_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::password);
	/* transient soap skipped */
}

void ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::requester);
	soap_embedded(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::securityDomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::securityDomain);
	soap_embedded(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::username, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::username);
	soap_embedded(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::password, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__AssertIdentityWithSimpleAuthenticationRequestType::password);
	/* transient soap skipped */
}

int ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, const char *tag, int id, const ns3__AssertIdentityWithSimpleAuthenticationRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securityDomain", -1, &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::securityDomain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:username", -1, &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:password", -1, &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationRequestType * SOAP_FMAC4 soap_get_ns3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AssertIdentityWithSimpleAuthenticationRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationRequestType * SOAP_FMAC4 soap_in_ns3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, const char *tag, ns3__AssertIdentityWithSimpleAuthenticationRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AssertIdentityWithSimpleAuthenticationRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType, sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AssertIdentityWithSimpleAuthenticationRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_securityDomain1 = 1;
	size_t soap_flag_username1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_securityDomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securityDomain", &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::securityDomain), "xsd:string"))
				{	soap_flag_securityDomain1--;
					continue;
				}
			if (soap_flag_username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:username", &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::username), "xsd:string"))
				{	soap_flag_username1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:password", &(a->ns3__AssertIdentityWithSimpleAuthenticationRequestType::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AssertIdentityWithSimpleAuthenticationRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType, 0, sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType), 0, soap_copy_ns3__AssertIdentityWithSimpleAuthenticationRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_securityDomain1 > 0 || soap_flag_username1 > 0 || soap_flag_password1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationRequestType * SOAP_FMAC4 soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__AssertIdentityWithSimpleAuthenticationRequestType);
		if (size)
			*size = sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType);
		((ns3__AssertIdentityWithSimpleAuthenticationRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__AssertIdentityWithSimpleAuthenticationRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType);
		for (int i = 0; i < n; i++)
			((ns3__AssertIdentityWithSimpleAuthenticationRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AssertIdentityWithSimpleAuthenticationRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AssertIdentityWithSimpleAuthenticationRequestType %p -> %p\n", q, p));
	*(ns3__AssertIdentityWithSimpleAuthenticationRequestType*)p = *(ns3__AssertIdentityWithSimpleAuthenticationRequestType*)q;
}

void ns3__ResolveAuthenticationAssertionResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::ssoSessionId);
	soap_default_std__string(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::securityDomain);
	/* transient soap skipped */
}

void ns3__ResolveAuthenticationAssertionResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::ssoSessionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::ssoSessionId);
	soap_embedded(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::securityDomain, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__ResolveAuthenticationAssertionResponseType::securityDomain);
	/* transient soap skipped */
}

int ns3__ResolveAuthenticationAssertionResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__ResolveAuthenticationAssertionResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ResolveAuthenticationAssertionResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResolveAuthenticationAssertionResponseType(struct soap *soap, const char *tag, int id, const ns3__ResolveAuthenticationAssertionResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType), type))
		return soap->error;
	soap_element_result(soap, "ns3:ssoSessionId");
	if (soap_out_std__string(soap, "ns3:ssoSessionId", -1, &(a->ns3__ResolveAuthenticationAssertionResponseType::ssoSessionId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:securityDomain", -1, &(a->ns3__ResolveAuthenticationAssertionResponseType::securityDomain), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ResolveAuthenticationAssertionResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ResolveAuthenticationAssertionResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionResponseType * SOAP_FMAC4 soap_get_ns3__ResolveAuthenticationAssertionResponseType(struct soap *soap, ns3__ResolveAuthenticationAssertionResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ResolveAuthenticationAssertionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__ResolveAuthenticationAssertionResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ResolveAuthenticationAssertionResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionResponseType * SOAP_FMAC4 soap_in_ns3__ResolveAuthenticationAssertionResponseType(struct soap *soap, const char *tag, ns3__ResolveAuthenticationAssertionResponseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ResolveAuthenticationAssertionResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType, sizeof(ns3__ResolveAuthenticationAssertionResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ResolveAuthenticationAssertionResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ssoSessionId1 = 1;
	size_t soap_flag_securityDomain1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ssoSessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:ssoSessionId", &(a->ns3__ResolveAuthenticationAssertionResponseType::ssoSessionId), "xsd:string"))
				{	soap_flag_ssoSessionId1--;
					continue;
				}
			if (soap_flag_securityDomain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:securityDomain", &(a->ns3__ResolveAuthenticationAssertionResponseType::securityDomain), "xsd:string"))
				{	soap_flag_securityDomain1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:ssoSessionId");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ResolveAuthenticationAssertionResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType, 0, sizeof(ns3__ResolveAuthenticationAssertionResponseType), 0, soap_copy_ns3__ResolveAuthenticationAssertionResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ssoSessionId1 > 0 || soap_flag_securityDomain1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionResponseType * SOAP_FMAC4 soap_instantiate_ns3__ResolveAuthenticationAssertionResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ResolveAuthenticationAssertionResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__ResolveAuthenticationAssertionResponseType);
		if (size)
			*size = sizeof(ns3__ResolveAuthenticationAssertionResponseType);
		((ns3__ResolveAuthenticationAssertionResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__ResolveAuthenticationAssertionResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__ResolveAuthenticationAssertionResponseType);
		for (int i = 0; i < n; i++)
			((ns3__ResolveAuthenticationAssertionResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__ResolveAuthenticationAssertionResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ResolveAuthenticationAssertionResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ResolveAuthenticationAssertionResponseType %p -> %p\n", q, p));
	*(ns3__ResolveAuthenticationAssertionResponseType*)p = *(ns3__ResolveAuthenticationAssertionResponseType*)q;
}

void ns3__ResolveAuthenticationAssertionRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::requester);
	soap_default_std__string(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::assertionId);
	/* transient soap skipped */
}

void ns3__ResolveAuthenticationAssertionRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::requester, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::requester);
	soap_embedded(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::assertionId, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns3__ResolveAuthenticationAssertionRequestType::assertionId);
	/* transient soap skipped */
}

int ns3__ResolveAuthenticationAssertionRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__ResolveAuthenticationAssertionRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ResolveAuthenticationAssertionRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResolveAuthenticationAssertionRequestType(struct soap *soap, const char *tag, int id, const ns3__ResolveAuthenticationAssertionRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:requester", -1, &(a->ns3__ResolveAuthenticationAssertionRequestType::requester), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns3:assertionId", -1, &(a->ns3__ResolveAuthenticationAssertionRequestType::assertionId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ResolveAuthenticationAssertionRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ResolveAuthenticationAssertionRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionRequestType * SOAP_FMAC4 soap_get_ns3__ResolveAuthenticationAssertionRequestType(struct soap *soap, ns3__ResolveAuthenticationAssertionRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ResolveAuthenticationAssertionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__ResolveAuthenticationAssertionRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ResolveAuthenticationAssertionRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionRequestType * SOAP_FMAC4 soap_in_ns3__ResolveAuthenticationAssertionRequestType(struct soap *soap, const char *tag, ns3__ResolveAuthenticationAssertionRequestType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ResolveAuthenticationAssertionRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType, sizeof(ns3__ResolveAuthenticationAssertionRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ResolveAuthenticationAssertionRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_assertionId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:requester", &(a->ns3__ResolveAuthenticationAssertionRequestType::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_assertionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns3:assertionId", &(a->ns3__ResolveAuthenticationAssertionRequestType::assertionId), "xsd:string"))
				{	soap_flag_assertionId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ResolveAuthenticationAssertionRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType, 0, sizeof(ns3__ResolveAuthenticationAssertionRequestType), 0, soap_copy_ns3__ResolveAuthenticationAssertionRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_requester1 > 0 || soap_flag_assertionId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionRequestType * SOAP_FMAC4 soap_instantiate_ns3__ResolveAuthenticationAssertionRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ResolveAuthenticationAssertionRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ns3__ResolveAuthenticationAssertionRequestType);
		if (size)
			*size = sizeof(ns3__ResolveAuthenticationAssertionRequestType);
		((ns3__ResolveAuthenticationAssertionRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (ns3__ResolveAuthenticationAssertionRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__ResolveAuthenticationAssertionRequestType);
		for (int i = 0; i < n; i++)
			((ns3__ResolveAuthenticationAssertionRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__ResolveAuthenticationAssertionRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ResolveAuthenticationAssertionRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ResolveAuthenticationAssertionRequestType %p -> %p\n", q, p));
	*(ns3__ResolveAuthenticationAssertionRequestType*)p = *(ns3__ResolveAuthenticationAssertionRequestType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__getSession(struct soap *soap, struct __ns6__getSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__SessionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__getSession(struct soap *soap, const struct __ns6__getSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__SessionRequestType(soap, &a->ns3__SessionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__getSession(struct soap *soap, const struct __ns6__getSession *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__getSession(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__getSession(struct soap *soap, const char *tag, int id, const struct __ns6__getSession *a, const char *type)
{
	if (soap_out_PointerTons3__SessionRequestType(soap, "ns3:SessionRequest", -1, &a->ns3__SessionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__getSession * SOAP_FMAC4 soap_get___ns6__getSession(struct soap *soap, struct __ns6__getSession *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__getSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns6__getSession * SOAP_FMAC4 soap_in___ns6__getSession(struct soap *soap, const char *tag, struct __ns6__getSession *a, const char *type)
{
	size_t soap_flag_ns3__SessionRequest = 1;
	short soap_flag;
	a = (struct __ns6__getSession *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__getSession, sizeof(struct __ns6__getSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__getSession(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__SessionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SessionRequestType(soap, "ns3:SessionRequest", &a->ns3__SessionRequest, "ns3:SessionRequestType"))
				{	soap_flag_ns3__SessionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns6__getSession * SOAP_FMAC4 soap_instantiate___ns6__getSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__getSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__getSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns6__getSession);
		if (size)
			*size = sizeof(struct __ns6__getSession);
	}
	else
	{	cp->ptr = (void*)new (struct __ns6__getSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__getSession);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__getSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__getSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__getSession %p -> %p\n", q, p));
	*(struct __ns6__getSession*)p = *(struct __ns6__getSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__accessSession(struct soap *soap, struct __ns6__accessSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__AccessSessionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__accessSession(struct soap *soap, const struct __ns6__accessSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__AccessSessionRequestType(soap, &a->ns3__AccessSessionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__accessSession(struct soap *soap, const struct __ns6__accessSession *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__accessSession(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__accessSession(struct soap *soap, const char *tag, int id, const struct __ns6__accessSession *a, const char *type)
{
	if (soap_out_PointerTons3__AccessSessionRequestType(soap, "ns3:AccessSessionRequest", -1, &a->ns3__AccessSessionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__accessSession * SOAP_FMAC4 soap_get___ns6__accessSession(struct soap *soap, struct __ns6__accessSession *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__accessSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns6__accessSession * SOAP_FMAC4 soap_in___ns6__accessSession(struct soap *soap, const char *tag, struct __ns6__accessSession *a, const char *type)
{
	size_t soap_flag_ns3__AccessSessionRequest = 1;
	short soap_flag;
	a = (struct __ns6__accessSession *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__accessSession, sizeof(struct __ns6__accessSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__accessSession(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__AccessSessionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__AccessSessionRequestType(soap, "ns3:AccessSessionRequest", &a->ns3__AccessSessionRequest, "ns3:AccessSessionRequestType"))
				{	soap_flag_ns3__AccessSessionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns6__accessSession * SOAP_FMAC4 soap_instantiate___ns6__accessSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__accessSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__accessSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns6__accessSession);
		if (size)
			*size = sizeof(struct __ns6__accessSession);
	}
	else
	{	cp->ptr = (void*)new (struct __ns6__accessSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__accessSession);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__accessSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__accessSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__accessSession %p -> %p\n", q, p));
	*(struct __ns6__accessSession*)p = *(struct __ns6__accessSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__userExists(struct soap *soap, struct __ns5__userExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__UserExistsRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__userExists(struct soap *soap, const struct __ns5__userExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__UserExistsRequestType(soap, &a->ns3__UserExistsRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__userExists(struct soap *soap, const struct __ns5__userExists *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns5__userExists(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__userExists(struct soap *soap, const char *tag, int id, const struct __ns5__userExists *a, const char *type)
{
	if (soap_out_PointerTons3__UserExistsRequestType(soap, "ns3:UserExistsRequest", -1, &a->ns3__UserExistsRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns5__userExists * SOAP_FMAC4 soap_get___ns5__userExists(struct soap *soap, struct __ns5__userExists *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns5__userExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns5__userExists * SOAP_FMAC4 soap_in___ns5__userExists(struct soap *soap, const char *tag, struct __ns5__userExists *a, const char *type)
{
	size_t soap_flag_ns3__UserExistsRequest = 1;
	short soap_flag;
	a = (struct __ns5__userExists *)soap_id_enter(soap, "", a, SOAP_TYPE___ns5__userExists, sizeof(struct __ns5__userExists), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns5__userExists(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__UserExistsRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__UserExistsRequestType(soap, "ns3:UserExistsRequest", &a->ns3__UserExistsRequest, "ns3:UserExistsRequestType"))
				{	soap_flag_ns3__UserExistsRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns5__userExists * SOAP_FMAC4 soap_instantiate___ns5__userExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns5__userExists(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns5__userExists, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns5__userExists);
		if (size)
			*size = sizeof(struct __ns5__userExists);
	}
	else
	{	cp->ptr = (void*)new (struct __ns5__userExists[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns5__userExists);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns5__userExists*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__userExists(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns5__userExists %p -> %p\n", q, p));
	*(struct __ns5__userExists*)p = *(struct __ns5__userExists*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__findRolesBySSOSessionId(struct soap *soap, struct __ns5__findRolesBySSOSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__FindRolesBySSOSessionIdRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__findRolesBySSOSessionId(struct soap *soap, const struct __ns5__findRolesBySSOSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, &a->ns3__FindRolesBySSOSessionIdRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__findRolesBySSOSessionId(struct soap *soap, const struct __ns5__findRolesBySSOSessionId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns5__findRolesBySSOSessionId(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__findRolesBySSOSessionId(struct soap *soap, const char *tag, int id, const struct __ns5__findRolesBySSOSessionId *a, const char *type)
{
	if (soap_out_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, "ns3:FindRolesBySSOSessionIdRequest", -1, &a->ns3__FindRolesBySSOSessionIdRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns5__findRolesBySSOSessionId * SOAP_FMAC4 soap_get___ns5__findRolesBySSOSessionId(struct soap *soap, struct __ns5__findRolesBySSOSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns5__findRolesBySSOSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns5__findRolesBySSOSessionId * SOAP_FMAC4 soap_in___ns5__findRolesBySSOSessionId(struct soap *soap, const char *tag, struct __ns5__findRolesBySSOSessionId *a, const char *type)
{
	size_t soap_flag_ns3__FindRolesBySSOSessionIdRequest = 1;
	short soap_flag;
	a = (struct __ns5__findRolesBySSOSessionId *)soap_id_enter(soap, "", a, SOAP_TYPE___ns5__findRolesBySSOSessionId, sizeof(struct __ns5__findRolesBySSOSessionId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns5__findRolesBySSOSessionId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__FindRolesBySSOSessionIdRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, "ns3:FindRolesBySSOSessionIdRequest", &a->ns3__FindRolesBySSOSessionIdRequest, "ns3:FindRolesBySSOSessionIdRequestType"))
				{	soap_flag_ns3__FindRolesBySSOSessionIdRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns5__findRolesBySSOSessionId * SOAP_FMAC4 soap_instantiate___ns5__findRolesBySSOSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns5__findRolesBySSOSessionId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns5__findRolesBySSOSessionId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns5__findRolesBySSOSessionId);
		if (size)
			*size = sizeof(struct __ns5__findRolesBySSOSessionId);
	}
	else
	{	cp->ptr = (void*)new (struct __ns5__findRolesBySSOSessionId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns5__findRolesBySSOSessionId);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns5__findRolesBySSOSessionId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__findRolesBySSOSessionId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns5__findRolesBySSOSessionId %p -> %p\n", q, p));
	*(struct __ns5__findRolesBySSOSessionId*)p = *(struct __ns5__findRolesBySSOSessionId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__findUserInSecurityDomain(struct soap *soap, struct __ns5__findUserInSecurityDomain *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__FindUserInSecurityDomainRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__findUserInSecurityDomain(struct soap *soap, const struct __ns5__findUserInSecurityDomain *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__FindUserInSecurityDomainRequestType(soap, &a->ns3__FindUserInSecurityDomainRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__findUserInSecurityDomain(struct soap *soap, const struct __ns5__findUserInSecurityDomain *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns5__findUserInSecurityDomain(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__findUserInSecurityDomain(struct soap *soap, const char *tag, int id, const struct __ns5__findUserInSecurityDomain *a, const char *type)
{
	if (soap_out_PointerTons3__FindUserInSecurityDomainRequestType(soap, "ns3:FindUserInSecurityDomainRequest", -1, &a->ns3__FindUserInSecurityDomainRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns5__findUserInSecurityDomain * SOAP_FMAC4 soap_get___ns5__findUserInSecurityDomain(struct soap *soap, struct __ns5__findUserInSecurityDomain *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns5__findUserInSecurityDomain(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns5__findUserInSecurityDomain * SOAP_FMAC4 soap_in___ns5__findUserInSecurityDomain(struct soap *soap, const char *tag, struct __ns5__findUserInSecurityDomain *a, const char *type)
{
	size_t soap_flag_ns3__FindUserInSecurityDomainRequest = 1;
	short soap_flag;
	a = (struct __ns5__findUserInSecurityDomain *)soap_id_enter(soap, "", a, SOAP_TYPE___ns5__findUserInSecurityDomain, sizeof(struct __ns5__findUserInSecurityDomain), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns5__findUserInSecurityDomain(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__FindUserInSecurityDomainRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__FindUserInSecurityDomainRequestType(soap, "ns3:FindUserInSecurityDomainRequest", &a->ns3__FindUserInSecurityDomainRequest, "ns3:FindUserInSecurityDomainRequestType"))
				{	soap_flag_ns3__FindUserInSecurityDomainRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns5__findUserInSecurityDomain * SOAP_FMAC4 soap_instantiate___ns5__findUserInSecurityDomain(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns5__findUserInSecurityDomain(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns5__findUserInSecurityDomain, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns5__findUserInSecurityDomain);
		if (size)
			*size = sizeof(struct __ns5__findUserInSecurityDomain);
	}
	else
	{	cp->ptr = (void*)new (struct __ns5__findUserInSecurityDomain[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns5__findUserInSecurityDomain);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns5__findUserInSecurityDomain*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__findUserInSecurityDomain(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns5__findUserInSecurityDomain %p -> %p\n", q, p));
	*(struct __ns5__findUserInSecurityDomain*)p = *(struct __ns5__findUserInSecurityDomain*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__findUserInSession(struct soap *soap, struct __ns5__findUserInSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__FindUserInSessionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__findUserInSession(struct soap *soap, const struct __ns5__findUserInSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__FindUserInSessionRequestType(soap, &a->ns3__FindUserInSessionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__findUserInSession(struct soap *soap, const struct __ns5__findUserInSession *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns5__findUserInSession(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__findUserInSession(struct soap *soap, const char *tag, int id, const struct __ns5__findUserInSession *a, const char *type)
{
	if (soap_out_PointerTons3__FindUserInSessionRequestType(soap, "ns3:FindUserInSessionRequest", -1, &a->ns3__FindUserInSessionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns5__findUserInSession * SOAP_FMAC4 soap_get___ns5__findUserInSession(struct soap *soap, struct __ns5__findUserInSession *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns5__findUserInSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns5__findUserInSession * SOAP_FMAC4 soap_in___ns5__findUserInSession(struct soap *soap, const char *tag, struct __ns5__findUserInSession *a, const char *type)
{
	size_t soap_flag_ns3__FindUserInSessionRequest = 1;
	short soap_flag;
	a = (struct __ns5__findUserInSession *)soap_id_enter(soap, "", a, SOAP_TYPE___ns5__findUserInSession, sizeof(struct __ns5__findUserInSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns5__findUserInSession(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__FindUserInSessionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__FindUserInSessionRequestType(soap, "ns3:FindUserInSessionRequest", &a->ns3__FindUserInSessionRequest, "ns3:FindUserInSessionRequestType"))
				{	soap_flag_ns3__FindUserInSessionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns5__findUserInSession * SOAP_FMAC4 soap_instantiate___ns5__findUserInSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns5__findUserInSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns5__findUserInSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns5__findUserInSession);
		if (size)
			*size = sizeof(struct __ns5__findUserInSession);
	}
	else
	{	cp->ptr = (void*)new (struct __ns5__findUserInSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns5__findUserInSession);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns5__findUserInSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__findUserInSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns5__findUserInSession %p -> %p\n", q, p));
	*(struct __ns5__findUserInSession*)p = *(struct __ns5__findUserInSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__globalSignoff(struct soap *soap, struct __ns4__globalSignoff *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GlobalSignoffRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__globalSignoff(struct soap *soap, const struct __ns4__globalSignoff *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__GlobalSignoffRequestType(soap, &a->ns3__GlobalSignoffRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__globalSignoff(struct soap *soap, const struct __ns4__globalSignoff *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__globalSignoff(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__globalSignoff(struct soap *soap, const char *tag, int id, const struct __ns4__globalSignoff *a, const char *type)
{
	if (soap_out_PointerTons3__GlobalSignoffRequestType(soap, "ns3:GlobalSignoffRequest", -1, &a->ns3__GlobalSignoffRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__globalSignoff * SOAP_FMAC4 soap_get___ns4__globalSignoff(struct soap *soap, struct __ns4__globalSignoff *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__globalSignoff(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__globalSignoff * SOAP_FMAC4 soap_in___ns4__globalSignoff(struct soap *soap, const char *tag, struct __ns4__globalSignoff *a, const char *type)
{
	size_t soap_flag_ns3__GlobalSignoffRequest = 1;
	short soap_flag;
	a = (struct __ns4__globalSignoff *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__globalSignoff, sizeof(struct __ns4__globalSignoff), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__globalSignoff(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GlobalSignoffRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__GlobalSignoffRequestType(soap, "ns3:GlobalSignoffRequest", &a->ns3__GlobalSignoffRequest, "ns3:GlobalSignoffRequestType"))
				{	soap_flag_ns3__GlobalSignoffRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns4__globalSignoff * SOAP_FMAC4 soap_instantiate___ns4__globalSignoff(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__globalSignoff(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__globalSignoff, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns4__globalSignoff);
		if (size)
			*size = sizeof(struct __ns4__globalSignoff);
	}
	else
	{	cp->ptr = (void*)new (struct __ns4__globalSignoff[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__globalSignoff);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__globalSignoff*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__globalSignoff(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__globalSignoff %p -> %p\n", q, p));
	*(struct __ns4__globalSignoff*)p = *(struct __ns4__globalSignoff*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, struct __ns4__assertIdentityWithSimpleAuthentication *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__AssertIdentityWithSimpleAuthenticationRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, const struct __ns4__assertIdentityWithSimpleAuthentication *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, &a->ns3__AssertIdentityWithSimpleAuthenticationRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, const struct __ns4__assertIdentityWithSimpleAuthentication *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__assertIdentityWithSimpleAuthentication(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, const char *tag, int id, const struct __ns4__assertIdentityWithSimpleAuthentication *a, const char *type)
{
	if (soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, "ns3:AssertIdentityWithSimpleAuthenticationRequest", -1, &a->ns3__AssertIdentityWithSimpleAuthenticationRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__assertIdentityWithSimpleAuthentication * SOAP_FMAC4 soap_get___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, struct __ns4__assertIdentityWithSimpleAuthentication *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__assertIdentityWithSimpleAuthentication(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__assertIdentityWithSimpleAuthentication * SOAP_FMAC4 soap_in___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, const char *tag, struct __ns4__assertIdentityWithSimpleAuthentication *a, const char *type)
{
	size_t soap_flag_ns3__AssertIdentityWithSimpleAuthenticationRequest = 1;
	short soap_flag;
	a = (struct __ns4__assertIdentityWithSimpleAuthentication *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__assertIdentityWithSimpleAuthentication, sizeof(struct __ns4__assertIdentityWithSimpleAuthentication), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__assertIdentityWithSimpleAuthentication(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__AssertIdentityWithSimpleAuthenticationRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, "ns3:AssertIdentityWithSimpleAuthenticationRequest", &a->ns3__AssertIdentityWithSimpleAuthenticationRequest, "ns3:AssertIdentityWithSimpleAuthenticationRequestType"))
				{	soap_flag_ns3__AssertIdentityWithSimpleAuthenticationRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns4__assertIdentityWithSimpleAuthentication * SOAP_FMAC4 soap_instantiate___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__assertIdentityWithSimpleAuthentication(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__assertIdentityWithSimpleAuthentication, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns4__assertIdentityWithSimpleAuthentication);
		if (size)
			*size = sizeof(struct __ns4__assertIdentityWithSimpleAuthentication);
	}
	else
	{	cp->ptr = (void*)new (struct __ns4__assertIdentityWithSimpleAuthentication[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__assertIdentityWithSimpleAuthentication);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__assertIdentityWithSimpleAuthentication*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__assertIdentityWithSimpleAuthentication(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__assertIdentityWithSimpleAuthentication %p -> %p\n", q, p));
	*(struct __ns4__assertIdentityWithSimpleAuthentication*)p = *(struct __ns4__assertIdentityWithSimpleAuthentication*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__resolveAuthenticationAssertion(struct soap *soap, struct __ns4__resolveAuthenticationAssertion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__ResolveAuthenticationAssertionRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__resolveAuthenticationAssertion(struct soap *soap, const struct __ns4__resolveAuthenticationAssertion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, &a->ns3__ResolveAuthenticationAssertionRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__resolveAuthenticationAssertion(struct soap *soap, const struct __ns4__resolveAuthenticationAssertion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__resolveAuthenticationAssertion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__resolveAuthenticationAssertion(struct soap *soap, const char *tag, int id, const struct __ns4__resolveAuthenticationAssertion *a, const char *type)
{
	if (soap_out_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, "ns3:ResolveAuthenticationAssertionRequest", -1, &a->ns3__ResolveAuthenticationAssertionRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__resolveAuthenticationAssertion * SOAP_FMAC4 soap_get___ns4__resolveAuthenticationAssertion(struct soap *soap, struct __ns4__resolveAuthenticationAssertion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__resolveAuthenticationAssertion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__resolveAuthenticationAssertion * SOAP_FMAC4 soap_in___ns4__resolveAuthenticationAssertion(struct soap *soap, const char *tag, struct __ns4__resolveAuthenticationAssertion *a, const char *type)
{
	size_t soap_flag_ns3__ResolveAuthenticationAssertionRequest = 1;
	short soap_flag;
	a = (struct __ns4__resolveAuthenticationAssertion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__resolveAuthenticationAssertion, sizeof(struct __ns4__resolveAuthenticationAssertion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__resolveAuthenticationAssertion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__ResolveAuthenticationAssertionRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, "ns3:ResolveAuthenticationAssertionRequest", &a->ns3__ResolveAuthenticationAssertionRequest, "ns3:ResolveAuthenticationAssertionRequestType"))
				{	soap_flag_ns3__ResolveAuthenticationAssertionRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns4__resolveAuthenticationAssertion * SOAP_FMAC4 soap_instantiate___ns4__resolveAuthenticationAssertion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__resolveAuthenticationAssertion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__resolveAuthenticationAssertion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __ns4__resolveAuthenticationAssertion);
		if (size)
			*size = sizeof(struct __ns4__resolveAuthenticationAssertion);
	}
	else
	{	cp->ptr = (void*)new (struct __ns4__resolveAuthenticationAssertion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__resolveAuthenticationAssertion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__resolveAuthenticationAssertion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__resolveAuthenticationAssertion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__resolveAuthenticationAssertion %p -> %p\n", q, p));
	*(struct __ns4__resolveAuthenticationAssertion*)p = *(struct __ns4__resolveAuthenticationAssertion*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__AssertionNotValidError = NULL;
	a->ns3__SSOIdentityProviderError = NULL;
	a->ns3__InvalidSessionError = NULL;
	a->ns3__NoSuchUserError = NULL;
	a->ns3__SSOIdentityManagerError = NULL;
	a->ns3__NoSuchSessionError = NULL;
	a->ns3__SSOSessionError = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__AssertionNotValidErrorType(soap, &a->ns3__AssertionNotValidError);
	soap_serialize_PointerTons3__SSOIdentityProviderErrorType(soap, &a->ns3__SSOIdentityProviderError);
	soap_serialize_PointerTons3__InvalidSessionErrorType(soap, &a->ns3__InvalidSessionError);
	soap_serialize_PointerTons3__NoSuchUserErrorType(soap, &a->ns3__NoSuchUserError);
	soap_serialize_PointerTons3__SSOIdentityManagerErrorType(soap, &a->ns3__SSOIdentityManagerError);
	soap_serialize_PointerTons3__NoSuchSessionErrorType(soap, &a->ns3__NoSuchSessionError);
	soap_serialize_PointerTons3__SSOSessionErrorType(soap, &a->ns3__SSOSessionError);
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons3__AssertionNotValidErrorType(soap, "ns3:AssertionNotValidError", -1, &a->ns3__AssertionNotValidError, ""))
		return soap->error;
	if (soap_out_PointerTons3__SSOIdentityProviderErrorType(soap, "ns3:SSOIdentityProviderError", -1, &a->ns3__SSOIdentityProviderError, ""))
		return soap->error;
	if (soap_out_PointerTons3__InvalidSessionErrorType(soap, "ns3:InvalidSessionError", -1, &a->ns3__InvalidSessionError, ""))
		return soap->error;
	if (soap_out_PointerTons3__NoSuchUserErrorType(soap, "ns3:NoSuchUserError", -1, &a->ns3__NoSuchUserError, ""))
		return soap->error;
	if (soap_out_PointerTons3__SSOIdentityManagerErrorType(soap, "ns3:SSOIdentityManagerError", -1, &a->ns3__SSOIdentityManagerError, ""))
		return soap->error;
	if (soap_out_PointerTons3__NoSuchSessionErrorType(soap, "ns3:NoSuchSessionError", -1, &a->ns3__NoSuchSessionError, ""))
		return soap->error;
	if (soap_out_PointerTons3__SSOSessionErrorType(soap, "ns3:SSOSessionError", -1, &a->ns3__SSOSessionError, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns3__AssertionNotValidError = 1;
	size_t soap_flag_ns3__SSOIdentityProviderError = 1;
	size_t soap_flag_ns3__InvalidSessionError = 1;
	size_t soap_flag_ns3__NoSuchUserError = 1;
	size_t soap_flag_ns3__SSOIdentityManagerError = 1;
	size_t soap_flag_ns3__NoSuchSessionError = 1;
	size_t soap_flag_ns3__SSOSessionError = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__AssertionNotValidError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__AssertionNotValidErrorType(soap, "ns3:AssertionNotValidError", &a->ns3__AssertionNotValidError, "ns3:AssertionNotValidErrorType"))
				{	soap_flag_ns3__AssertionNotValidError--;
					continue;
				}
			if (soap_flag_ns3__SSOIdentityProviderError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOIdentityProviderErrorType(soap, "ns3:SSOIdentityProviderError", &a->ns3__SSOIdentityProviderError, "ns3:SSOIdentityProviderErrorType"))
				{	soap_flag_ns3__SSOIdentityProviderError--;
					continue;
				}
			if (soap_flag_ns3__InvalidSessionError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__InvalidSessionErrorType(soap, "ns3:InvalidSessionError", &a->ns3__InvalidSessionError, "ns3:InvalidSessionErrorType"))
				{	soap_flag_ns3__InvalidSessionError--;
					continue;
				}
			if (soap_flag_ns3__NoSuchUserError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__NoSuchUserErrorType(soap, "ns3:NoSuchUserError", &a->ns3__NoSuchUserError, "ns3:NoSuchUserErrorType"))
				{	soap_flag_ns3__NoSuchUserError--;
					continue;
				}
			if (soap_flag_ns3__SSOIdentityManagerError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOIdentityManagerErrorType(soap, "ns3:SSOIdentityManagerError", &a->ns3__SSOIdentityManagerError, "ns3:SSOIdentityManagerErrorType"))
				{	soap_flag_ns3__SSOIdentityManagerError--;
					continue;
				}
			if (soap_flag_ns3__NoSuchSessionError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__NoSuchSessionErrorType(soap, "ns3:NoSuchSessionError", &a->ns3__NoSuchSessionError, "ns3:NoSuchSessionErrorType"))
				{	soap_flag_ns3__NoSuchSessionError--;
					continue;
				}
			if (soap_flag_ns3__SSOSessionError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__SSOSessionErrorType(soap, "ns3:SSOSessionError", &a->ns3__SSOSessionError, "ns3:SSOSessionErrorType"))
				{	soap_flag_ns3__SSOSessionError--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SessionResponseType(struct soap *soap, ns3__SessionResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SessionResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SessionResponseType(struct soap *soap, ns3__SessionResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SessionResponseType);
	if (soap_out_PointerTons3__SessionResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SessionResponseType(struct soap *soap, const char *tag, int id, ns3__SessionResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SessionResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SessionResponseType ** SOAP_FMAC4 soap_get_PointerTons3__SessionResponseType(struct soap *soap, ns3__SessionResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SessionResponseType ** SOAP_FMAC4 soap_in_PointerTons3__SessionResponseType(struct soap *soap, const char *tag, ns3__SessionResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SessionResponseType **)soap_malloc(soap, sizeof(ns3__SessionResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SessionResponseType *)soap_instantiate_ns3__SessionResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SessionResponseType ** p = (ns3__SessionResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SessionResponseType, sizeof(ns3__SessionResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SessionRequestType(struct soap *soap, ns3__SessionRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SessionRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SessionRequestType(struct soap *soap, ns3__SessionRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SessionRequestType);
	if (soap_out_PointerTons3__SessionRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SessionRequestType(struct soap *soap, const char *tag, int id, ns3__SessionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SessionRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SessionRequestType ** SOAP_FMAC4 soap_get_PointerTons3__SessionRequestType(struct soap *soap, ns3__SessionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SessionRequestType ** SOAP_FMAC4 soap_in_PointerTons3__SessionRequestType(struct soap *soap, const char *tag, ns3__SessionRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SessionRequestType **)soap_malloc(soap, sizeof(ns3__SessionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SessionRequestType *)soap_instantiate_ns3__SessionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SessionRequestType ** p = (ns3__SessionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SessionRequestType, sizeof(ns3__SessionRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AccessSessionResponseType(struct soap *soap, ns3__AccessSessionResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AccessSessionResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AccessSessionResponseType(struct soap *soap, ns3__AccessSessionResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AccessSessionResponseType);
	if (soap_out_PointerTons3__AccessSessionResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AccessSessionResponseType(struct soap *soap, const char *tag, int id, ns3__AccessSessionResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AccessSessionResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AccessSessionResponseType ** SOAP_FMAC4 soap_get_PointerTons3__AccessSessionResponseType(struct soap *soap, ns3__AccessSessionResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AccessSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AccessSessionResponseType ** SOAP_FMAC4 soap_in_PointerTons3__AccessSessionResponseType(struct soap *soap, const char *tag, ns3__AccessSessionResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AccessSessionResponseType **)soap_malloc(soap, sizeof(ns3__AccessSessionResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AccessSessionResponseType *)soap_instantiate_ns3__AccessSessionResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AccessSessionResponseType ** p = (ns3__AccessSessionResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AccessSessionResponseType, sizeof(ns3__AccessSessionResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AccessSessionRequestType(struct soap *soap, ns3__AccessSessionRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AccessSessionRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AccessSessionRequestType(struct soap *soap, ns3__AccessSessionRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AccessSessionRequestType);
	if (soap_out_PointerTons3__AccessSessionRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AccessSessionRequestType(struct soap *soap, const char *tag, int id, ns3__AccessSessionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AccessSessionRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AccessSessionRequestType ** SOAP_FMAC4 soap_get_PointerTons3__AccessSessionRequestType(struct soap *soap, ns3__AccessSessionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AccessSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AccessSessionRequestType ** SOAP_FMAC4 soap_in_PointerTons3__AccessSessionRequestType(struct soap *soap, const char *tag, ns3__AccessSessionRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AccessSessionRequestType **)soap_malloc(soap, sizeof(ns3__AccessSessionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AccessSessionRequestType *)soap_instantiate_ns3__AccessSessionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AccessSessionRequestType ** p = (ns3__AccessSessionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AccessSessionRequestType, sizeof(ns3__AccessSessionRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserExistsResponseType(struct soap *soap, ns3__UserExistsResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__UserExistsResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserExistsResponseType(struct soap *soap, ns3__UserExistsResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__UserExistsResponseType);
	if (soap_out_PointerTons3__UserExistsResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserExistsResponseType(struct soap *soap, const char *tag, int id, ns3__UserExistsResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__UserExistsResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__UserExistsResponseType ** SOAP_FMAC4 soap_get_PointerTons3__UserExistsResponseType(struct soap *soap, ns3__UserExistsResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__UserExistsResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__UserExistsResponseType ** SOAP_FMAC4 soap_in_PointerTons3__UserExistsResponseType(struct soap *soap, const char *tag, ns3__UserExistsResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__UserExistsResponseType **)soap_malloc(soap, sizeof(ns3__UserExistsResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__UserExistsResponseType *)soap_instantiate_ns3__UserExistsResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__UserExistsResponseType ** p = (ns3__UserExistsResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__UserExistsResponseType, sizeof(ns3__UserExistsResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__UserExistsRequestType(struct soap *soap, ns3__UserExistsRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__UserExistsRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__UserExistsRequestType(struct soap *soap, ns3__UserExistsRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__UserExistsRequestType);
	if (soap_out_PointerTons3__UserExistsRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__UserExistsRequestType(struct soap *soap, const char *tag, int id, ns3__UserExistsRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__UserExistsRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__UserExistsRequestType ** SOAP_FMAC4 soap_get_PointerTons3__UserExistsRequestType(struct soap *soap, ns3__UserExistsRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__UserExistsRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__UserExistsRequestType ** SOAP_FMAC4 soap_in_PointerTons3__UserExistsRequestType(struct soap *soap, const char *tag, ns3__UserExistsRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__UserExistsRequestType **)soap_malloc(soap, sizeof(ns3__UserExistsRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__UserExistsRequestType *)soap_instantiate_ns3__UserExistsRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__UserExistsRequestType ** p = (ns3__UserExistsRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__UserExistsRequestType, sizeof(ns3__UserExistsRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindRolesBySSOSessionIdResponseType(struct soap *soap, ns3__FindRolesBySSOSessionIdResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindRolesBySSOSessionIdResponseType(struct soap *soap, ns3__FindRolesBySSOSessionIdResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdResponseType);
	if (soap_out_PointerTons3__FindRolesBySSOSessionIdResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindRolesBySSOSessionIdResponseType(struct soap *soap, const char *tag, int id, ns3__FindRolesBySSOSessionIdResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdResponseType ** SOAP_FMAC4 soap_get_PointerTons3__FindRolesBySSOSessionIdResponseType(struct soap *soap, ns3__FindRolesBySSOSessionIdResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindRolesBySSOSessionIdResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdResponseType ** SOAP_FMAC4 soap_in_PointerTons3__FindRolesBySSOSessionIdResponseType(struct soap *soap, const char *tag, ns3__FindRolesBySSOSessionIdResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindRolesBySSOSessionIdResponseType **)soap_malloc(soap, sizeof(ns3__FindRolesBySSOSessionIdResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindRolesBySSOSessionIdResponseType *)soap_instantiate_ns3__FindRolesBySSOSessionIdResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindRolesBySSOSessionIdResponseType ** p = (ns3__FindRolesBySSOSessionIdResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdResponseType, sizeof(ns3__FindRolesBySSOSessionIdResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindRolesBySSOSessionIdRequestType(struct soap *soap, ns3__FindRolesBySSOSessionIdRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindRolesBySSOSessionIdRequestType(struct soap *soap, ns3__FindRolesBySSOSessionIdRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindRolesBySSOSessionIdRequestType);
	if (soap_out_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindRolesBySSOSessionIdRequestType(struct soap *soap, const char *tag, int id, ns3__FindRolesBySSOSessionIdRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdRequestType ** SOAP_FMAC4 soap_get_PointerTons3__FindRolesBySSOSessionIdRequestType(struct soap *soap, ns3__FindRolesBySSOSessionIdRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindRolesBySSOSessionIdRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindRolesBySSOSessionIdRequestType ** SOAP_FMAC4 soap_in_PointerTons3__FindRolesBySSOSessionIdRequestType(struct soap *soap, const char *tag, ns3__FindRolesBySSOSessionIdRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindRolesBySSOSessionIdRequestType **)soap_malloc(soap, sizeof(ns3__FindRolesBySSOSessionIdRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindRolesBySSOSessionIdRequestType *)soap_instantiate_ns3__FindRolesBySSOSessionIdRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindRolesBySSOSessionIdRequestType ** p = (ns3__FindRolesBySSOSessionIdRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindRolesBySSOSessionIdRequestType, sizeof(ns3__FindRolesBySSOSessionIdRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindUserInSecurityDomainResponseType(struct soap *soap, ns3__FindUserInSecurityDomainResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindUserInSecurityDomainResponseType(struct soap *soap, ns3__FindUserInSecurityDomainResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindUserInSecurityDomainResponseType);
	if (soap_out_PointerTons3__FindUserInSecurityDomainResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindUserInSecurityDomainResponseType(struct soap *soap, const char *tag, int id, ns3__FindUserInSecurityDomainResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainResponseType ** SOAP_FMAC4 soap_get_PointerTons3__FindUserInSecurityDomainResponseType(struct soap *soap, ns3__FindUserInSecurityDomainResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindUserInSecurityDomainResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainResponseType ** SOAP_FMAC4 soap_in_PointerTons3__FindUserInSecurityDomainResponseType(struct soap *soap, const char *tag, ns3__FindUserInSecurityDomainResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindUserInSecurityDomainResponseType **)soap_malloc(soap, sizeof(ns3__FindUserInSecurityDomainResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindUserInSecurityDomainResponseType *)soap_instantiate_ns3__FindUserInSecurityDomainResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindUserInSecurityDomainResponseType ** p = (ns3__FindUserInSecurityDomainResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindUserInSecurityDomainResponseType, sizeof(ns3__FindUserInSecurityDomainResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindUserInSecurityDomainRequestType(struct soap *soap, ns3__FindUserInSecurityDomainRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindUserInSecurityDomainRequestType(struct soap *soap, ns3__FindUserInSecurityDomainRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindUserInSecurityDomainRequestType);
	if (soap_out_PointerTons3__FindUserInSecurityDomainRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindUserInSecurityDomainRequestType(struct soap *soap, const char *tag, int id, ns3__FindUserInSecurityDomainRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainRequestType ** SOAP_FMAC4 soap_get_PointerTons3__FindUserInSecurityDomainRequestType(struct soap *soap, ns3__FindUserInSecurityDomainRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindUserInSecurityDomainRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindUserInSecurityDomainRequestType ** SOAP_FMAC4 soap_in_PointerTons3__FindUserInSecurityDomainRequestType(struct soap *soap, const char *tag, ns3__FindUserInSecurityDomainRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindUserInSecurityDomainRequestType **)soap_malloc(soap, sizeof(ns3__FindUserInSecurityDomainRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindUserInSecurityDomainRequestType *)soap_instantiate_ns3__FindUserInSecurityDomainRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindUserInSecurityDomainRequestType ** p = (ns3__FindUserInSecurityDomainRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindUserInSecurityDomainRequestType, sizeof(ns3__FindUserInSecurityDomainRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindUserInSessionResponseType(struct soap *soap, ns3__FindUserInSessionResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindUserInSessionResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindUserInSessionResponseType(struct soap *soap, ns3__FindUserInSessionResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindUserInSessionResponseType);
	if (soap_out_PointerTons3__FindUserInSessionResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindUserInSessionResponseType(struct soap *soap, const char *tag, int id, ns3__FindUserInSessionResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindUserInSessionResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindUserInSessionResponseType ** SOAP_FMAC4 soap_get_PointerTons3__FindUserInSessionResponseType(struct soap *soap, ns3__FindUserInSessionResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindUserInSessionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindUserInSessionResponseType ** SOAP_FMAC4 soap_in_PointerTons3__FindUserInSessionResponseType(struct soap *soap, const char *tag, ns3__FindUserInSessionResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindUserInSessionResponseType **)soap_malloc(soap, sizeof(ns3__FindUserInSessionResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindUserInSessionResponseType *)soap_instantiate_ns3__FindUserInSessionResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindUserInSessionResponseType ** p = (ns3__FindUserInSessionResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindUserInSessionResponseType, sizeof(ns3__FindUserInSessionResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FindUserInSessionRequestType(struct soap *soap, ns3__FindUserInSessionRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__FindUserInSessionRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FindUserInSessionRequestType(struct soap *soap, ns3__FindUserInSessionRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__FindUserInSessionRequestType);
	if (soap_out_PointerTons3__FindUserInSessionRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FindUserInSessionRequestType(struct soap *soap, const char *tag, int id, ns3__FindUserInSessionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__FindUserInSessionRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__FindUserInSessionRequestType ** SOAP_FMAC4 soap_get_PointerTons3__FindUserInSessionRequestType(struct soap *soap, ns3__FindUserInSessionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__FindUserInSessionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__FindUserInSessionRequestType ** SOAP_FMAC4 soap_in_PointerTons3__FindUserInSessionRequestType(struct soap *soap, const char *tag, ns3__FindUserInSessionRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__FindUserInSessionRequestType **)soap_malloc(soap, sizeof(ns3__FindUserInSessionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__FindUserInSessionRequestType *)soap_instantiate_ns3__FindUserInSessionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__FindUserInSessionRequestType ** p = (ns3__FindUserInSessionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__FindUserInSessionRequestType, sizeof(ns3__FindUserInSessionRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GlobalSignoffResponseType(struct soap *soap, ns3__GlobalSignoffResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__GlobalSignoffResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GlobalSignoffResponseType(struct soap *soap, ns3__GlobalSignoffResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__GlobalSignoffResponseType);
	if (soap_out_PointerTons3__GlobalSignoffResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GlobalSignoffResponseType(struct soap *soap, const char *tag, int id, ns3__GlobalSignoffResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__GlobalSignoffResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__GlobalSignoffResponseType ** SOAP_FMAC4 soap_get_PointerTons3__GlobalSignoffResponseType(struct soap *soap, ns3__GlobalSignoffResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__GlobalSignoffResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__GlobalSignoffResponseType ** SOAP_FMAC4 soap_in_PointerTons3__GlobalSignoffResponseType(struct soap *soap, const char *tag, ns3__GlobalSignoffResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__GlobalSignoffResponseType **)soap_malloc(soap, sizeof(ns3__GlobalSignoffResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__GlobalSignoffResponseType *)soap_instantiate_ns3__GlobalSignoffResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__GlobalSignoffResponseType ** p = (ns3__GlobalSignoffResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__GlobalSignoffResponseType, sizeof(ns3__GlobalSignoffResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__GlobalSignoffRequestType(struct soap *soap, ns3__GlobalSignoffRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__GlobalSignoffRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__GlobalSignoffRequestType(struct soap *soap, ns3__GlobalSignoffRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__GlobalSignoffRequestType);
	if (soap_out_PointerTons3__GlobalSignoffRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__GlobalSignoffRequestType(struct soap *soap, const char *tag, int id, ns3__GlobalSignoffRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__GlobalSignoffRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__GlobalSignoffRequestType ** SOAP_FMAC4 soap_get_PointerTons3__GlobalSignoffRequestType(struct soap *soap, ns3__GlobalSignoffRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__GlobalSignoffRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__GlobalSignoffRequestType ** SOAP_FMAC4 soap_in_PointerTons3__GlobalSignoffRequestType(struct soap *soap, const char *tag, ns3__GlobalSignoffRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__GlobalSignoffRequestType **)soap_malloc(soap, sizeof(ns3__GlobalSignoffRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__GlobalSignoffRequestType *)soap_instantiate_ns3__GlobalSignoffRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__GlobalSignoffRequestType ** p = (ns3__GlobalSignoffRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__GlobalSignoffRequestType, sizeof(ns3__GlobalSignoffRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType);
	if (soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, const char *tag, int id, ns3__AssertIdentityWithSimpleAuthenticationResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationResponseType ** SOAP_FMAC4 soap_get_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationResponseType ** SOAP_FMAC4 soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationResponseType(struct soap *soap, const char *tag, ns3__AssertIdentityWithSimpleAuthenticationResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AssertIdentityWithSimpleAuthenticationResponseType **)soap_malloc(soap, sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AssertIdentityWithSimpleAuthenticationResponseType *)soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AssertIdentityWithSimpleAuthenticationResponseType ** p = (ns3__AssertIdentityWithSimpleAuthenticationResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationResponseType, sizeof(ns3__AssertIdentityWithSimpleAuthenticationResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType);
	if (soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, const char *tag, int id, ns3__AssertIdentityWithSimpleAuthenticationRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationRequestType ** SOAP_FMAC4 soap_get_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, ns3__AssertIdentityWithSimpleAuthenticationRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AssertIdentityWithSimpleAuthenticationRequestType ** SOAP_FMAC4 soap_in_PointerTons3__AssertIdentityWithSimpleAuthenticationRequestType(struct soap *soap, const char *tag, ns3__AssertIdentityWithSimpleAuthenticationRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AssertIdentityWithSimpleAuthenticationRequestType **)soap_malloc(soap, sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AssertIdentityWithSimpleAuthenticationRequestType *)soap_instantiate_ns3__AssertIdentityWithSimpleAuthenticationRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AssertIdentityWithSimpleAuthenticationRequestType ** p = (ns3__AssertIdentityWithSimpleAuthenticationRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AssertIdentityWithSimpleAuthenticationRequestType, sizeof(ns3__AssertIdentityWithSimpleAuthenticationRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ResolveAuthenticationAssertionResponseType(struct soap *soap, ns3__ResolveAuthenticationAssertionResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ResolveAuthenticationAssertionResponseType(struct soap *soap, ns3__ResolveAuthenticationAssertionResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionResponseType);
	if (soap_out_PointerTons3__ResolveAuthenticationAssertionResponseType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ResolveAuthenticationAssertionResponseType(struct soap *soap, const char *tag, int id, ns3__ResolveAuthenticationAssertionResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionResponseType ** SOAP_FMAC4 soap_get_PointerTons3__ResolveAuthenticationAssertionResponseType(struct soap *soap, ns3__ResolveAuthenticationAssertionResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ResolveAuthenticationAssertionResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionResponseType ** SOAP_FMAC4 soap_in_PointerTons3__ResolveAuthenticationAssertionResponseType(struct soap *soap, const char *tag, ns3__ResolveAuthenticationAssertionResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ResolveAuthenticationAssertionResponseType **)soap_malloc(soap, sizeof(ns3__ResolveAuthenticationAssertionResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ResolveAuthenticationAssertionResponseType *)soap_instantiate_ns3__ResolveAuthenticationAssertionResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ResolveAuthenticationAssertionResponseType ** p = (ns3__ResolveAuthenticationAssertionResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionResponseType, sizeof(ns3__ResolveAuthenticationAssertionResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ResolveAuthenticationAssertionRequestType(struct soap *soap, ns3__ResolveAuthenticationAssertionRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ResolveAuthenticationAssertionRequestType(struct soap *soap, ns3__ResolveAuthenticationAssertionRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ResolveAuthenticationAssertionRequestType);
	if (soap_out_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ResolveAuthenticationAssertionRequestType(struct soap *soap, const char *tag, int id, ns3__ResolveAuthenticationAssertionRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionRequestType ** SOAP_FMAC4 soap_get_PointerTons3__ResolveAuthenticationAssertionRequestType(struct soap *soap, ns3__ResolveAuthenticationAssertionRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ResolveAuthenticationAssertionRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__ResolveAuthenticationAssertionRequestType ** SOAP_FMAC4 soap_in_PointerTons3__ResolveAuthenticationAssertionRequestType(struct soap *soap, const char *tag, ns3__ResolveAuthenticationAssertionRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ResolveAuthenticationAssertionRequestType **)soap_malloc(soap, sizeof(ns3__ResolveAuthenticationAssertionRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ResolveAuthenticationAssertionRequestType *)soap_instantiate_ns3__ResolveAuthenticationAssertionRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ResolveAuthenticationAssertionRequestType ** p = (ns3__ResolveAuthenticationAssertionRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ResolveAuthenticationAssertionRequestType, sizeof(ns3__ResolveAuthenticationAssertionRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSOSessionErrorType(struct soap *soap, ns3__SSOSessionErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSOSessionErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSOSessionErrorType(struct soap *soap, ns3__SSOSessionErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSOSessionErrorType);
	if (soap_out_PointerTons3__SSOSessionErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSOSessionErrorType(struct soap *soap, const char *tag, int id, ns3__SSOSessionErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSOSessionErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSOSessionErrorType ** SOAP_FMAC4 soap_get_PointerTons3__SSOSessionErrorType(struct soap *soap, ns3__SSOSessionErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSOSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSOSessionErrorType ** SOAP_FMAC4 soap_in_PointerTons3__SSOSessionErrorType(struct soap *soap, const char *tag, ns3__SSOSessionErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSOSessionErrorType **)soap_malloc(soap, sizeof(ns3__SSOSessionErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSOSessionErrorType *)soap_instantiate_ns3__SSOSessionErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSOSessionErrorType ** p = (ns3__SSOSessionErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSOSessionErrorType, sizeof(ns3__SSOSessionErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__NoSuchSessionErrorType(struct soap *soap, ns3__NoSuchSessionErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__NoSuchSessionErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__NoSuchSessionErrorType(struct soap *soap, ns3__NoSuchSessionErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__NoSuchSessionErrorType);
	if (soap_out_PointerTons3__NoSuchSessionErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__NoSuchSessionErrorType(struct soap *soap, const char *tag, int id, ns3__NoSuchSessionErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__NoSuchSessionErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__NoSuchSessionErrorType ** SOAP_FMAC4 soap_get_PointerTons3__NoSuchSessionErrorType(struct soap *soap, ns3__NoSuchSessionErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__NoSuchSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__NoSuchSessionErrorType ** SOAP_FMAC4 soap_in_PointerTons3__NoSuchSessionErrorType(struct soap *soap, const char *tag, ns3__NoSuchSessionErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__NoSuchSessionErrorType **)soap_malloc(soap, sizeof(ns3__NoSuchSessionErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__NoSuchSessionErrorType *)soap_instantiate_ns3__NoSuchSessionErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__NoSuchSessionErrorType ** p = (ns3__NoSuchSessionErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__NoSuchSessionErrorType, sizeof(ns3__NoSuchSessionErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSOIdentityManagerErrorType(struct soap *soap, ns3__SSOIdentityManagerErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSOIdentityManagerErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSOIdentityManagerErrorType(struct soap *soap, ns3__SSOIdentityManagerErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSOIdentityManagerErrorType);
	if (soap_out_PointerTons3__SSOIdentityManagerErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSOIdentityManagerErrorType(struct soap *soap, const char *tag, int id, ns3__SSOIdentityManagerErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSOIdentityManagerErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSOIdentityManagerErrorType ** SOAP_FMAC4 soap_get_PointerTons3__SSOIdentityManagerErrorType(struct soap *soap, ns3__SSOIdentityManagerErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSOIdentityManagerErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSOIdentityManagerErrorType ** SOAP_FMAC4 soap_in_PointerTons3__SSOIdentityManagerErrorType(struct soap *soap, const char *tag, ns3__SSOIdentityManagerErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSOIdentityManagerErrorType **)soap_malloc(soap, sizeof(ns3__SSOIdentityManagerErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSOIdentityManagerErrorType *)soap_instantiate_ns3__SSOIdentityManagerErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSOIdentityManagerErrorType ** p = (ns3__SSOIdentityManagerErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSOIdentityManagerErrorType, sizeof(ns3__SSOIdentityManagerErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__NoSuchUserErrorType(struct soap *soap, ns3__NoSuchUserErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__NoSuchUserErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__NoSuchUserErrorType(struct soap *soap, ns3__NoSuchUserErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__NoSuchUserErrorType);
	if (soap_out_PointerTons3__NoSuchUserErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__NoSuchUserErrorType(struct soap *soap, const char *tag, int id, ns3__NoSuchUserErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__NoSuchUserErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__NoSuchUserErrorType ** SOAP_FMAC4 soap_get_PointerTons3__NoSuchUserErrorType(struct soap *soap, ns3__NoSuchUserErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__NoSuchUserErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__NoSuchUserErrorType ** SOAP_FMAC4 soap_in_PointerTons3__NoSuchUserErrorType(struct soap *soap, const char *tag, ns3__NoSuchUserErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__NoSuchUserErrorType **)soap_malloc(soap, sizeof(ns3__NoSuchUserErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__NoSuchUserErrorType *)soap_instantiate_ns3__NoSuchUserErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__NoSuchUserErrorType ** p = (ns3__NoSuchUserErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__NoSuchUserErrorType, sizeof(ns3__NoSuchUserErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__InvalidSessionErrorType(struct soap *soap, ns3__InvalidSessionErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__InvalidSessionErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__InvalidSessionErrorType(struct soap *soap, ns3__InvalidSessionErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__InvalidSessionErrorType);
	if (soap_out_PointerTons3__InvalidSessionErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__InvalidSessionErrorType(struct soap *soap, const char *tag, int id, ns3__InvalidSessionErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__InvalidSessionErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__InvalidSessionErrorType ** SOAP_FMAC4 soap_get_PointerTons3__InvalidSessionErrorType(struct soap *soap, ns3__InvalidSessionErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__InvalidSessionErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__InvalidSessionErrorType ** SOAP_FMAC4 soap_in_PointerTons3__InvalidSessionErrorType(struct soap *soap, const char *tag, ns3__InvalidSessionErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__InvalidSessionErrorType **)soap_malloc(soap, sizeof(ns3__InvalidSessionErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__InvalidSessionErrorType *)soap_instantiate_ns3__InvalidSessionErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__InvalidSessionErrorType ** p = (ns3__InvalidSessionErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__InvalidSessionErrorType, sizeof(ns3__InvalidSessionErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSOIdentityProviderErrorType(struct soap *soap, ns3__SSOIdentityProviderErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSOIdentityProviderErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSOIdentityProviderErrorType(struct soap *soap, ns3__SSOIdentityProviderErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSOIdentityProviderErrorType);
	if (soap_out_PointerTons3__SSOIdentityProviderErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSOIdentityProviderErrorType(struct soap *soap, const char *tag, int id, ns3__SSOIdentityProviderErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSOIdentityProviderErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSOIdentityProviderErrorType ** SOAP_FMAC4 soap_get_PointerTons3__SSOIdentityProviderErrorType(struct soap *soap, ns3__SSOIdentityProviderErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSOIdentityProviderErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSOIdentityProviderErrorType ** SOAP_FMAC4 soap_in_PointerTons3__SSOIdentityProviderErrorType(struct soap *soap, const char *tag, ns3__SSOIdentityProviderErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSOIdentityProviderErrorType **)soap_malloc(soap, sizeof(ns3__SSOIdentityProviderErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSOIdentityProviderErrorType *)soap_instantiate_ns3__SSOIdentityProviderErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSOIdentityProviderErrorType ** p = (ns3__SSOIdentityProviderErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSOIdentityProviderErrorType, sizeof(ns3__SSOIdentityProviderErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AssertionNotValidErrorType(struct soap *soap, ns3__AssertionNotValidErrorType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AssertionNotValidErrorType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AssertionNotValidErrorType(struct soap *soap, ns3__AssertionNotValidErrorType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AssertionNotValidErrorType);
	if (soap_out_PointerTons3__AssertionNotValidErrorType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AssertionNotValidErrorType(struct soap *soap, const char *tag, int id, ns3__AssertionNotValidErrorType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AssertionNotValidErrorType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AssertionNotValidErrorType ** SOAP_FMAC4 soap_get_PointerTons3__AssertionNotValidErrorType(struct soap *soap, ns3__AssertionNotValidErrorType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AssertionNotValidErrorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AssertionNotValidErrorType ** SOAP_FMAC4 soap_in_PointerTons3__AssertionNotValidErrorType(struct soap *soap, const char *tag, ns3__AssertionNotValidErrorType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AssertionNotValidErrorType **)soap_malloc(soap, sizeof(ns3__AssertionNotValidErrorType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AssertionNotValidErrorType *)soap_instantiate_ns3__AssertionNotValidErrorType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AssertionNotValidErrorType ** p = (ns3__AssertionNotValidErrorType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AssertionNotValidErrorType, sizeof(ns3__AssertionNotValidErrorType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSONameValuePairType(struct soap *soap, ns3__SSONameValuePairType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSONameValuePairType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSONameValuePairType(struct soap *soap, ns3__SSONameValuePairType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSONameValuePairType);
	if (soap_out_PointerTons3__SSONameValuePairType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSONameValuePairType(struct soap *soap, const char *tag, int id, ns3__SSONameValuePairType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSONameValuePairType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSONameValuePairType ** SOAP_FMAC4 soap_get_PointerTons3__SSONameValuePairType(struct soap *soap, ns3__SSONameValuePairType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSONameValuePairType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSONameValuePairType ** SOAP_FMAC4 soap_in_PointerTons3__SSONameValuePairType(struct soap *soap, const char *tag, ns3__SSONameValuePairType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSONameValuePairType **)soap_malloc(soap, sizeof(ns3__SSONameValuePairType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSONameValuePairType *)soap_instantiate_ns3__SSONameValuePairType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSONameValuePairType ** p = (ns3__SSONameValuePairType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSONameValuePairType, sizeof(ns3__SSONameValuePairType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSOSessionType(struct soap *soap, ns3__SSOSessionType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSOSessionType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSOSessionType(struct soap *soap, ns3__SSOSessionType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSOSessionType);
	if (soap_out_PointerTons3__SSOSessionType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSOSessionType(struct soap *soap, const char *tag, int id, ns3__SSOSessionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSOSessionType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSOSessionType ** SOAP_FMAC4 soap_get_PointerTons3__SSOSessionType(struct soap *soap, ns3__SSOSessionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSOSessionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSOSessionType ** SOAP_FMAC4 soap_in_PointerTons3__SSOSessionType(struct soap *soap, const char *tag, ns3__SSOSessionType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSOSessionType **)soap_malloc(soap, sizeof(ns3__SSOSessionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSOSessionType *)soap_instantiate_ns3__SSOSessionType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSOSessionType ** p = (ns3__SSOSessionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSOSessionType, sizeof(ns3__SSOSessionType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSORoleType(struct soap *soap, ns3__SSORoleType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSORoleType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSORoleType(struct soap *soap, ns3__SSORoleType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSORoleType);
	if (soap_out_PointerTons3__SSORoleType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSORoleType(struct soap *soap, const char *tag, int id, ns3__SSORoleType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSORoleType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSORoleType ** SOAP_FMAC4 soap_get_PointerTons3__SSORoleType(struct soap *soap, ns3__SSORoleType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSORoleType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSORoleType ** SOAP_FMAC4 soap_in_PointerTons3__SSORoleType(struct soap *soap, const char *tag, ns3__SSORoleType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSORoleType **)soap_malloc(soap, sizeof(ns3__SSORoleType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSORoleType *)soap_instantiate_ns3__SSORoleType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSORoleType ** p = (ns3__SSORoleType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSORoleType, sizeof(ns3__SSORoleType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SSOUserType(struct soap *soap, ns3__SSOUserType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__SSOUserType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SSOUserType(struct soap *soap, ns3__SSOUserType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__SSOUserType);
	if (soap_out_PointerTons3__SSOUserType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SSOUserType(struct soap *soap, const char *tag, int id, ns3__SSOUserType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__SSOUserType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__SSOUserType ** SOAP_FMAC4 soap_get_PointerTons3__SSOUserType(struct soap *soap, ns3__SSOUserType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__SSOUserType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__SSOUserType ** SOAP_FMAC4 soap_in_PointerTons3__SSOUserType(struct soap *soap, const char *tag, ns3__SSOUserType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__SSOUserType **)soap_malloc(soap, sizeof(ns3__SSOUserType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__SSOUserType *)soap_instantiate_ns3__SSOUserType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__SSOUserType ** p = (ns3__SSOUserType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__SSOUserType, sizeof(ns3__SSOUserType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, std::vector<ns3__SSONameValuePairType * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, const std::vector<ns3__SSONameValuePairType * >*a)
{
	for (std::vector<ns3__SSONameValuePairType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__SSONameValuePairType(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, const char *tag, int id, const std::vector<ns3__SSONameValuePairType * >*a, const char *type)
{
	for (std::vector<ns3__SSONameValuePairType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__SSONameValuePairType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__SSONameValuePairType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, const char *tag, std::vector<ns3__SSONameValuePairType * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__SSONameValuePairType(soap, -1)))
		return NULL;
	ns3__SSONameValuePairType *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__SSONameValuePairType, SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSONameValuePairType, sizeof(ns3__SSONameValuePairType), 1))
				break;
			if (!soap_in_PointerTons3__SSONameValuePairType(soap, tag, NULL, "ns3:SSONameValuePairType"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons3__SSONameValuePairType(soap, tag, &n, "ns3:SSONameValuePairType"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC3 std::vector<ns3__SSONameValuePairType * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__SSONameValuePairType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSONameValuePairType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<ns3__SSONameValuePairType * >);
		if (size)
			*size = sizeof(std::vector<ns3__SSONameValuePairType * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<ns3__SSONameValuePairType * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns3__SSONameValuePairType * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns3__SSONameValuePairType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__SSONameValuePairType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__SSONameValuePairType * > %p -> %p\n", q, p));
	*(std::vector<ns3__SSONameValuePairType * >*)p = *(std::vector<ns3__SSONameValuePairType * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, std::vector<ns3__SSORoleType * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, const std::vector<ns3__SSORoleType * >*a)
{
	for (std::vector<ns3__SSORoleType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__SSORoleType(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, const char *tag, int id, const std::vector<ns3__SSORoleType * >*a, const char *type)
{
	for (std::vector<ns3__SSORoleType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__SSORoleType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__SSORoleType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, const char *tag, std::vector<ns3__SSORoleType * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__SSORoleType(soap, -1)))
		return NULL;
	ns3__SSORoleType *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns3__SSORoleType, SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSORoleType, sizeof(ns3__SSORoleType), 1))
				break;
			if (!soap_in_PointerTons3__SSORoleType(soap, tag, NULL, "ns3:SSORoleType"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons3__SSORoleType(soap, tag, &n, "ns3:SSORoleType"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC3 std::vector<ns3__SSORoleType * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__SSORoleType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons3__SSORoleType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<ns3__SSORoleType * >);
		if (size)
			*size = sizeof(std::vector<ns3__SSORoleType * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<ns3__SSORoleType * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns3__SSORoleType * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns3__SSORoleType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__SSORoleType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns3__SSORoleType * > %p -> %p\n", q, p));
	*(std::vector<ns3__SSORoleType * >*)p = *(std::vector<ns3__SSORoleType * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
