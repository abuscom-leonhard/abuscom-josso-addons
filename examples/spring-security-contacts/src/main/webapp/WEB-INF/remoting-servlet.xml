<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ JOSSO: Java Open Single Sign-On
  ~
  ~ Copyright 2004-2009, Atricore, Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  ~
  -->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Contacts web application
  - $Id: remoting-servlet.xml 974 2009-01-14 00:39:45Z sgonzalez $
  -->
<beans>

	<!-- RMI exporter for the ContactManager -->
	<!-- This could just as easily have been in
		 applicationContext-common-business.xml, because it doesn't rely on
		 DispatcherServlet or indeed any other HTTP services. It's in this
		 application context simply for logical placement with other
		 remoting exporters. -->
	<!-- COMMENTED OUT BY DEFAULT TO AVOID CONFLICTS WITH APPLICATION SERVERS
	<bean id="contactManager-rmi" class="org.springframework.remoting.rmi.RmiServiceExporter">
		<property name="service"><ref bean="contactManager"/></property>
		<property name="serviceInterface">
			<value>sample.contact.ContactManager</value>
		</property>
		<property name="serviceName"><value>contactManager</value></property>
		<property name="registryPort"><value>1099</value></property>
	</bean>
	-->

	<!-- HTTP invoker exporter for the ContactManager -->
	<!-- Spring's HTTP invoker uses Java serialization via HTTP  -->
	<bean name="/ContactManager-httpinvoker" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
		<property name="service" ref="contactManager"/>
		<property name="serviceInterface" value="sample.contact.ContactManager"/>
	</bean>

	<!-- Hessian exporter for the ContactManager -->
	<!-- Hessian is a slim binary HTTP remoting protocol -->
	<bean name="/ContactManager-hessian" class="org.springframework.remoting.caucho.HessianServiceExporter">
		<property name="service" ref="contactManager"/>
		<property name="serviceInterface" value="sample.contact.ContactManager"/>
	</bean>

	<!-- Burlap exporter for the ContactManager -->
	<!-- Burlap is a slim XML-based HTTP remoting protocol -->
	<bean name="/ContactManager-burlap" class="org.springframework.remoting.caucho.BurlapServiceExporter">
		<property name="service" ref="contactManager"/>
		<property name="serviceInterface" value="sample.contact.ContactManager"/>
	</bean>

</beans>
